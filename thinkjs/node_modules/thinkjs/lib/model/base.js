'use strict';

var _inherits = require('babel-runtime/helpers/inherits')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _Promise = require('babel-runtime/core-js/promise')['default'];

var _Object$keys = require('babel-runtime/core-js/object/keys')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

exports.__esModule = true;

var _util = require('util');

var _util2 = _interopRequireDefault(_util);

var _baseJs = require('./_base.js');

var _baseJs2 = _interopRequireDefault(_baseJs);

/**
 * model base class
 * @type {Class}
 */

var _default = (function (_Base) {
  _inherits(_default, _Base);

  function _default() {
    _classCallCheck(this, _default);

    _Base.apply(this, arguments);
  }

  /**
   * get table fields
   * @param  {String} table [table name]
   * @return {}       []
   */

  _default.prototype.getTableFields = function getTableFields(table) {
    var storeKey, fields, _name;

    return _regeneratorRuntime.async(function getTableFields$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          table = table || this.getTableName();
          storeKey = this.config.type + '_' + table + '_fields';
          fields = thinkCache(thinkCache.TABLE, storeKey);

          if (fields) {
            context$2$0.next = 8;
            break;
          }

          context$2$0.next = 6;
          return _regeneratorRuntime.awrap(this.db().getFields(table));

        case 6:
          fields = context$2$0.sent;

          thinkCache(thinkCache.TABLE, storeKey, fields);

        case 8:
          if (!(table !== this.getTableName())) {
            context$2$0.next = 10;
            break;
          }

          return context$2$0.abrupt('return', fields);

        case 10:
          context$2$0.t0 = _regeneratorRuntime.keys(fields);

        case 11:
          if ((context$2$0.t1 = context$2$0.t0()).done) {
            context$2$0.next = 18;
            break;
          }

          _name = context$2$0.t1.value;

          if (!fields[_name].primary) {
            context$2$0.next = 16;
            break;
          }

          this.pk = _name;
          return context$2$0.abrupt('break', 18);

        case 16:
          context$2$0.next = 11;
          break;

        case 18:
          //merge user set fields config
          this.fields = think.extend({}, fields, this.fields);
          return context$2$0.abrupt('return', this.fields);

        case 20:
        case 'end':
          return context$2$0.stop();
      }
    }, null, this);
  };

  /**
   * get unique field
   * @param  {Object} data []
   * @return {Promise}      []
   */

  _default.prototype.getUniqueField = function getUniqueField(data) {
    var fields, _name2;

    return _regeneratorRuntime.async(function getUniqueField$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.next = 2;
          return _regeneratorRuntime.awrap(this.getTableFields());

        case 2:
          fields = context$2$0.sent;
          context$2$0.t0 = _regeneratorRuntime.keys(fields);

        case 4:
          if ((context$2$0.t1 = context$2$0.t0()).done) {
            context$2$0.next = 10;
            break;
          }

          _name2 = context$2$0.t1.value;

          if (!(fields[_name2].unique && (!data || data[_name2]))) {
            context$2$0.next = 8;
            break;
          }

          return context$2$0.abrupt('return', _name2);

        case 8:
          context$2$0.next = 4;
          break;

        case 10:
        case 'end':
          return context$2$0.stop();
      }
    }, null, this);
  };

  /**
   * get last sql
   * @return {Promise} []
   */

  _default.prototype.getLastSql = function getLastSql() {
    return this.db().getLastSql();
  };

  /**
   * get primary key
   * @return {Promise} []
   */

  _default.prototype.getPk = function getPk() {
    var _this = this;

    if (this.pk !== 'id') {
      return _Promise.resolve(this.pk);
    }
    return this.getTableFields().then(function () {
      return _this.pk;
    });
  };

  /**
   * build sql
   * @param  {[type]} options [description]
   * @return {[type]}         [description]
   */

  _default.prototype.buildSql = function buildSql(options) {
    return _regeneratorRuntime.async(function buildSql$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.next = 2;
          return _regeneratorRuntime.awrap(this.parseOptions(options));

        case 2:
          options = context$2$0.sent;
          return context$2$0.abrupt('return', '( ' + this.db().buildSelectSql(options).trim() + ' )');

        case 4:
        case 'end':
          return context$2$0.stop();
      }
    }, null, this);
  };

  /**
   * parse options
   * @param  {Object} options []
   * @return promise         []
   */

  _default.prototype.parseOptions = function parseOptions(oriOpts, extraOptions) {
    var options, fields, keyReg, key, msg;
    return _regeneratorRuntime.async(function parseOptions$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          options = think.extend({}, this._options);

          if (think.isObject(oriOpts)) {
            options = think.extend(options, oriOpts, extraOptions);
          }
          //clear options
          this._options = {};
          //get table name
          options.table = options.table || this.getTableName();

          options.tablePrefix = this.getTablePrefix();
          options.model = this.getModelName();

          //get table fields can not use table alias
          context$2$0.next = 8;
          return _regeneratorRuntime.awrap(this.getTableFields(options.table));

        case 8:
          fields = context$2$0.sent;

          //table alias
          if (options.alias) {
            options.table += ' AS ' + options.alias;
          }

          if (!think.isObject(oriOpts)) {
            options = think.extend(options, this.parseWhereOptions(oriOpts, extraOptions));
          }
          //check where key

          if (!(options.where && !think.isEmpty(fields))) {
            context$2$0.next = 21;
            break;
          }

          keyReg = /^[\w\.\|\&]+$/;
          context$2$0.t0 = _regeneratorRuntime.keys(options.where);

        case 14:
          if ((context$2$0.t1 = context$2$0.t0()).done) {
            context$2$0.next = 21;
            break;
          }

          key = context$2$0.t1.value;

          if (keyReg.test(key)) {
            context$2$0.next = 19;
            break;
          }

          msg = new Error(think.locale('FIELD_KEY_NOT_VALID', key));
          return context$2$0.abrupt('return', think.reject(msg));

        case 19:
          context$2$0.next = 14;
          break;

        case 21:
          //field reverse
          if (options.field && options.fieldReverse) {
            (function () {
              //reset fieldReverse value
              options.fieldReverse = false;
              var optionsField = options.field;
              options.field = _Object$keys(fields).filter(function (item) {
                if (optionsField.indexOf(item) === -1) {
                  return item;
                }
              });
            })();
          }
          return context$2$0.abrupt('return', this.optionsFilter(options, fields));

        case 23:
        case 'end':
          return context$2$0.stop();
      }
    }, null, this);
  };

  /**
   * parse where options
   * @return {Object} 
   */

  _default.prototype.parseWhereOptions = function parseWhereOptions(options) {
    if (think.isNumber(options) || think.isString(options)) {
      var _where;

      options += '';
      var where = (_where = {}, _where[this.pk] = options.indexOf(',') > -1 ? { IN: options } : options, _where);
      return { where: where };
    }
    return options;
  };

  /**
   * parse type
   * @param  {Object} data []
   * @param  {} key  []
   * @return {}      []
   */

  _default.prototype.parseType = function parseType(key, value) {
    var fieldType = this.fields[key].type || '';
    if (fieldType.indexOf('bigint') === -1 && fieldType.indexOf('int') > -1) {
      return parseInt(value, 10) || 0;
    } else if (fieldType.indexOf('double') > -1 || fieldType.indexOf('float') > -1) {
      return parseFloat(value) || 0.0;
    } else if (fieldType.indexOf('bool') > -1) {
      return !!value;
    }
    return value;
  };

  /**
   * parse data, after fields getted
   * @param  {} data []
   * @return {}      []
   */

  _default.prototype.parseData = function parseData(data) {
    //deep clone data
    data = think.extend({}, data);
    for (var key in data) {
      var val = data[key];
      //remove data not in fields
      if (!this.fields[key]) {
        delete data[key];
      } else if (think.isNumber(val) || think.isString(val) || think.isBoolean(val)) {
        data[key] = this.parseType(key, val);
      }
    }
    return this.dataFilter(data);
  };

  /**
   * add data
   * @param {Object} data    []
   * @param {Object} options []
   * @param {} replace []
   */

  _default.prototype.add = function add(data, options, replace) {
    var msg, parsedData, insertId;
    return _regeneratorRuntime.async(function add$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          if (options === true) {
            replace = true;
            options = {};
          }
          //copy data
          data = think.extend({}, this._data, data);
          //clear data
          this._data = {};

          if (!think.isEmpty(data)) {
            context$2$0.next = 6;
            break;
          }

          msg = new Error(think.locale('DATA_EMPTY'));
          return context$2$0.abrupt('return', think.reject(msg));

        case 6:
          context$2$0.next = 8;
          return _regeneratorRuntime.awrap(this.parseOptions(options));

        case 8:
          options = context$2$0.sent;
          parsedData = this.parseData(data);
          context$2$0.next = 12;
          return _regeneratorRuntime.awrap(this.beforeAdd(parsedData, options));

        case 12:
          parsedData = context$2$0.sent;
          context$2$0.next = 15;
          return _regeneratorRuntime.awrap(this.db().add(parsedData, options, replace));

        case 15:
          insertId = data[this.pk] = this.db().getLastInsertId();
          context$2$0.next = 18;
          return _regeneratorRuntime.awrap(this.afterAdd(data, options));

        case 18:
          return context$2$0.abrupt('return', insertId);

        case 19:
        case 'end':
          return context$2$0.stop();
      }
    }, null, this);
  };

  /**
   * then add
   * @param  {Object} data       []
   * @param  {Object} where      []
   * @return {}            []
   */

  _default.prototype.thenAdd = function thenAdd(data, where) {
    var _ref2;

    var findData, _ref, insertId;

    return _regeneratorRuntime.async(function thenAdd$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.next = 2;
          return _regeneratorRuntime.awrap(this.where(where).find());

        case 2:
          findData = context$2$0.sent;

          if (think.isEmpty(findData)) {
            context$2$0.next = 5;
            break;
          }

          return context$2$0.abrupt('return', (_ref = {}, _ref[this.pk] = findData[this.pk], _ref.type = 'exist', _ref));

        case 5:
          context$2$0.next = 7;
          return _regeneratorRuntime.awrap(this.add(data));

        case 7:
          insertId = context$2$0.sent;
          return context$2$0.abrupt('return', (_ref2 = {}, _ref2[this.pk] = insertId, _ref2.type = 'add', _ref2));

        case 9:
        case 'end':
          return context$2$0.stop();
      }
    }, null, this);
  };

  /**
   * add multi data
   * @param {Object} data    []
   * @param {} options []
   * @param {} replace []
   */

  _default.prototype.addMany = function addMany(data, options, replace) {
    var promises, insertId, insertIds;
    return _regeneratorRuntime.async(function addMany$(context$2$0) {
      var _this2 = this;

      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          if (!(!think.isArray(data) || !think.isObject(data[0]))) {
            context$2$0.next = 2;
            break;
          }

          return context$2$0.abrupt('return', think.reject(new Error(think.locale('DATA_MUST_BE_ARRAY'))));

        case 2:
          if (options === true) {
            replace = true;
            options = {};
          }
          context$2$0.next = 5;
          return _regeneratorRuntime.awrap(this.parseOptions(options));

        case 5:
          options = context$2$0.sent;
          promises = data.map(function (item) {
            item = _this2.parseData(item);
            return _this2.beforeAdd(item, options);
          });
          context$2$0.next = 9;
          return _regeneratorRuntime.awrap(_Promise.all(promises));

        case 9:
          data = context$2$0.sent;
          context$2$0.next = 12;
          return _regeneratorRuntime.awrap(this.db().addMany(data, options, replace));

        case 12:
          insertId = this.db().getLastInsertId() - data.length + 1;
          insertIds = [];

          promises = data.map(function (item, i) {
            var id = insertId + i;
            item[_this2.pk] = id;
            insertIds.push(id);
            return _this2.afterAdd(item, options);
          });
          context$2$0.next = 17;
          return _regeneratorRuntime.awrap(_Promise.all(promises));

        case 17:
          data = context$2$0.sent;
          return context$2$0.abrupt('return', insertIds);

        case 19:
        case 'end':
          return context$2$0.stop();
      }
    }, null, this);
  };

  /**
   * delete data
   * @param  {Object} options []
   * @return {Promise}         []
   */

  _default.prototype['delete'] = function _delete(options) {
    var rows;
    return _regeneratorRuntime.async(function _delete$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.next = 2;
          return _regeneratorRuntime.awrap(this.parseOptions(options));

        case 2:
          options = context$2$0.sent;
          context$2$0.next = 5;
          return _regeneratorRuntime.awrap(this.db()['delete'](options));

        case 5:
          rows = context$2$0.sent;
          context$2$0.next = 8;
          return _regeneratorRuntime.awrap(this.afterDelete(options));

        case 8:
          return context$2$0.abrupt('return', rows);

        case 9:
        case 'end':
          return context$2$0.stop();
      }
    }, null, this);
  };

  /**
   * update data
   * @param  {Object} data      []
   * @param  {Object} options   []
   * @param  {Boolean} ignoreWhere []
   * @return {Promise}          []
   */

  _default.prototype.update = function update(data, options) {
    var parsedData, copyData, pk, _options$where, rows;

    return _regeneratorRuntime.async(function update$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:

          data = think.extend({}, this._data, data);
          //clear data
          this._data = {};

          context$2$0.next = 4;
          return _regeneratorRuntime.awrap(this.parseOptions(options));

        case 4:
          options = context$2$0.sent;

          //remove readonly field data
          this.readonlyFields.forEach(function (item) {
            delete data[item];
          });

          parsedData = this.parseData(data);

          if (!think.isEmpty(parsedData)) {
            context$2$0.next = 9;
            break;
          }

          return context$2$0.abrupt('return', think.reject(new Error(think.locale('DATA_EMPTY'))));

        case 9:
          copyData = think.extend({}, parsedData);

          if (!think.isEmpty(options.where)) {
            context$2$0.next = 20;
            break;
          }

          context$2$0.next = 13;
          return _regeneratorRuntime.awrap(this.getPk());

        case 13:
          pk = context$2$0.sent;

          if (!parsedData[pk]) {
            context$2$0.next = 19;
            break;
          }

          options.where = (_options$where = {}, _options$where[pk] = parsedData[pk], _options$where);
          delete parsedData[pk];
          context$2$0.next = 20;
          break;

        case 19:
          return context$2$0.abrupt('return', think.reject(new Error(think.locale('MISS_WHERE_CONDITION'))));

        case 20:
          context$2$0.next = 22;
          return _regeneratorRuntime.awrap(this.beforeUpdate(parsedData, options));

        case 22:
          parsedData = context$2$0.sent;
          context$2$0.next = 25;
          return _regeneratorRuntime.awrap(this.db().update(parsedData, options));

        case 25:
          rows = context$2$0.sent;
          context$2$0.next = 28;
          return _regeneratorRuntime.awrap(this.afterUpdate(copyData, options));

        case 28:
          return context$2$0.abrupt('return', rows);

        case 29:
        case 'end':
          return context$2$0.stop();
      }
    }, null, this);
  };

  /**
   * update all data
   * @param  {Array} dataList []
   * @return {Promise}          []
   */

  _default.prototype.updateMany = function updateMany(dataList, options) {
    var _this3 = this;

    if (!think.isArray(dataList)) {
      //empty data and options
      this._options = {};
      this._data = {};

      return think.reject(new Error(think.locale('DATA_MUST_BE_ARRAY')));
    }
    var promises = dataList.map(function (data) {
      return _this3.update(data, options);
    });
    return _Promise.all(promises).then(function (data) {
      return data.reduce(function (a, b) {
        return a + b;
      });
    });
  };

  /**
   * increment field data
   * @return {Promise} []
   */

  _default.prototype.increment = function increment(field) {
    var _data;

    var step = arguments.length <= 1 || arguments[1] === undefined ? 1 : arguments[1];

    var data = (_data = {}, _data[field] = ['exp', field + '+' + step], _data);
    return this.update(data);
  };

  /**
   * decrement field data
   * @return {} []
   */

  _default.prototype.decrement = function decrement(field) {
    var _data2;

    var step = arguments.length <= 1 || arguments[1] === undefined ? 1 : arguments[1];

    var data = (_data2 = {}, _data2[field] = ['exp', field + '-' + step], _data2);
    return this.update(data);
  };

  /**
   * find data
   * @return Promise
   */

  _default.prototype.find = function find(options) {
    var data;
    return _regeneratorRuntime.async(function find$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.next = 2;
          return _regeneratorRuntime.awrap(this.parseOptions(options, { limit: 1 }));

        case 2:
          options = context$2$0.sent;
          context$2$0.next = 5;
          return _regeneratorRuntime.awrap(this.db().select(options));

        case 5:
          data = context$2$0.sent;
          return context$2$0.abrupt('return', this.afterFind(data[0] || {}, options));

        case 7:
        case 'end':
          return context$2$0.stop();
      }
    }, null, this);
  };

  /**
   * select
   * @return Promise
   */

  _default.prototype.select = function select(options) {
    var data;
    return _regeneratorRuntime.async(function select$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.next = 2;
          return _regeneratorRuntime.awrap(this.parseOptions(options));

        case 2:
          options = context$2$0.sent;
          context$2$0.next = 5;
          return _regeneratorRuntime.awrap(this.db().select(options));

        case 5:
          data = context$2$0.sent;
          return context$2$0.abrupt('return', this.afterSelect(data, options));

        case 7:
        case 'end':
          return context$2$0.stop();
      }
    }, null, this);
  };

  /**
   * select add
   * @param  {} options []
   * @return {Promise}         []
   */

  _default.prototype.selectAdd = function selectAdd(options) {
    var promise, data, fields;
    return _regeneratorRuntime.async(function selectAdd$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          promise = _Promise.resolve(options);

          if (options instanceof module.exports) {
            promise = options.parseOptions();
          }
          context$2$0.next = 4;
          return _regeneratorRuntime.awrap(_Promise.all([this.parseOptions(), promise]));

        case 4:
          data = context$2$0.sent;
          fields = data[0].field || _Object$keys(this.fields);
          return context$2$0.abrupt('return', this.db().selectAdd(fields, data[0].table, data[1]));

        case 7:
        case 'end':
          return context$2$0.stop();
      }
    }, null, this);
  };

  /**
   * count select
   * @param  options  
   * @param  pageFlag 
   * @return promise         
   */

  _default.prototype.countSelect = function countSelect(options, pageFlag) {
    var count, pk, table, numsPerPage, data, totalPage, result;
    return _regeneratorRuntime.async(function countSelect$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          count = undefined;

          if (think.isBoolean(options)) {
            pageFlag = options;
            options = {};
          } else if (think.isNumber(options)) {
            count = options;
            options = {};
          }

          context$2$0.next = 4;
          return _regeneratorRuntime.awrap(this.parseOptions(options));

        case 4:
          options = context$2$0.sent;
          pk = this.pk;
          table = options.alias || this.getTableName();

          //delete table options avoid error when has alias
          delete options.table;

          if (count) {
            context$2$0.next = 12;
            break;
          }

          context$2$0.next = 11;
          return _regeneratorRuntime.awrap(this.options(options).count(table + '.' + pk));

        case 11:
          count = context$2$0.sent;

        case 12:

          options.limit = options.limit || [0, this.config.nums_per_page];

          numsPerPage = options.limit[1];
          data = { numsPerPage: numsPerPage };
          totalPage = Math.ceil(count / data.numsPerPage);

          data.currentPage = parseInt(options.limit[0] / options.limit[1] + 1);

          if (think.isBoolean(pageFlag) && data.currentPage > totalPage) {
            if (pageFlag) {
              data.currentPage = 1;
              options.limit = [0, numsPerPage];
            } else {
              data.currentPage = totalPage;
              options.limit = [(totalPage - 1) * numsPerPage, numsPerPage];
            }
          }
          result = think.extend({ count: count, totalPages: totalPage }, data);

          if (options.cache && options.cache.key) {
            options.cache.key += '_count';
          }

          if (!count) {
            context$2$0.next = 26;
            break;
          }

          context$2$0.next = 23;
          return _regeneratorRuntime.awrap(this.select(options));

        case 23:
          context$2$0.t0 = context$2$0.sent;
          context$2$0.next = 27;
          break;

        case 26:
          context$2$0.t0 = [];

        case 27:
          result.data = context$2$0.t0;
          return context$2$0.abrupt('return', result);

        case 29:
        case 'end':
          return context$2$0.stop();
      }
    }, null, this);
  };

  /**
   * get field data
   * @return {[type]} [description]
   */

  _default.prototype.getField = function getField(field, one) {
    var options, data, multi, _ret2;

    return _regeneratorRuntime.async(function getField$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.next = 2;
          return _regeneratorRuntime.awrap(this.parseOptions({ 'field': field }));

        case 2:
          options = context$2$0.sent;

          if (think.isNumber(one)) {
            options.limit = one;
          } else if (one === true) {
            options.limit = 1;
          }
          context$2$0.next = 6;
          return _regeneratorRuntime.awrap(this.db().select(options));

        case 6:
          data = context$2$0.sent;
          multi = field.indexOf(',') > -1;

          if (!multi) {
            context$2$0.next = 14;
            break;
          }

          _ret2 = (function () {
            var fields = field.split(/\s*,\s*/);
            var result = {};
            fields.forEach(function (item) {
              return result[item] = [];
            });
            data.every(function (item) {
              fields.forEach(function (fItem) {
                if (one === true) {
                  result[fItem] = item[fItem];
                } else {
                  result[fItem].push(item[fItem]);
                }
              });
              return one !== true;
            });
            return {
              v: result
            };
          })();

          if (!(typeof _ret2 === 'object')) {
            context$2$0.next = 12;
            break;
          }

          return context$2$0.abrupt('return', _ret2.v);

        case 12:
          context$2$0.next = 16;
          break;

        case 14:
          data = data.map(function (item) {
            for (var key in item) {
              return item[key];
            }
          });
          return context$2$0.abrupt('return', one === true ? data[0] : data);

        case 16:
        case 'end':
          return context$2$0.stop();
      }
    }, null, this);
  };

  /**
   * get count
   * @param  {String} field []
   * @return {Promise}       []
   */

  _default.prototype.count = function count(field) {
    return _regeneratorRuntime.async(function count$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.t1 = field;

          if (context$2$0.t1) {
            context$2$0.next = 5;
            break;
          }

          context$2$0.next = 4;
          return _regeneratorRuntime.awrap(this.getPk());

        case 4:
          context$2$0.t1 = context$2$0.sent;

        case 5:
          context$2$0.t0 = context$2$0.t1;

          if (context$2$0.t0) {
            context$2$0.next = 8;
            break;
          }

          context$2$0.t0 = '*';

        case 8:
          field = context$2$0.t0;
          return context$2$0.abrupt('return', this.getField('COUNT(' + field + ') AS think_count', true));

        case 10:
        case 'end':
          return context$2$0.stop();
      }
    }, null, this);
  };

  /**
   * get sum
   * @param  {String} field []
   * @return {Promise}       []
   */

  _default.prototype.sum = function sum(field) {
    return _regeneratorRuntime.async(function sum$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.t1 = field;

          if (context$2$0.t1) {
            context$2$0.next = 5;
            break;
          }

          context$2$0.next = 4;
          return _regeneratorRuntime.awrap(this.getPk());

        case 4:
          context$2$0.t1 = context$2$0.sent;

        case 5:
          context$2$0.t0 = context$2$0.t1;

          if (context$2$0.t0) {
            context$2$0.next = 8;
            break;
          }

          context$2$0.t0 = '*';

        case 8:
          field = context$2$0.t0;
          return context$2$0.abrupt('return', this.getField('SUM(' + field + ') AS think_sum', true));

        case 10:
        case 'end':
          return context$2$0.stop();
      }
    }, null, this);
  };

  /**
   * get min value
   * @param  {String} field []
   * @return {Promise}       []
   */

  _default.prototype.min = function min(field) {
    return _regeneratorRuntime.async(function min$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.t1 = field;

          if (context$2$0.t1) {
            context$2$0.next = 5;
            break;
          }

          context$2$0.next = 4;
          return _regeneratorRuntime.awrap(this.getPk());

        case 4:
          context$2$0.t1 = context$2$0.sent;

        case 5:
          context$2$0.t0 = context$2$0.t1;

          if (context$2$0.t0) {
            context$2$0.next = 8;
            break;
          }

          context$2$0.t0 = '*';

        case 8:
          field = context$2$0.t0;
          return context$2$0.abrupt('return', this.getField('MIN(' + field + ') AS think_min', true));

        case 10:
        case 'end':
          return context$2$0.stop();
      }
    }, null, this);
  };

  /**
   * get max valud
   * @param  {String} field []
   * @return {Promise}       []
   */

  _default.prototype.max = function max(field) {
    return _regeneratorRuntime.async(function max$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.t1 = field;

          if (context$2$0.t1) {
            context$2$0.next = 5;
            break;
          }

          context$2$0.next = 4;
          return _regeneratorRuntime.awrap(this.getPk());

        case 4:
          context$2$0.t1 = context$2$0.sent;

        case 5:
          context$2$0.t0 = context$2$0.t1;

          if (context$2$0.t0) {
            context$2$0.next = 8;
            break;
          }

          context$2$0.t0 = '*';

        case 8:
          field = context$2$0.t0;
          return context$2$0.abrupt('return', this.getField('MAX(' + field + ') AS think_max', true));

        case 10:
        case 'end':
          return context$2$0.stop();
      }
    }, null, this);
  };

  /**
   * get value average
   * @param  {String} field []
   * @return {Promise}       []
   */

  _default.prototype.avg = function avg(field) {
    return _regeneratorRuntime.async(function avg$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.t1 = field;

          if (context$2$0.t1) {
            context$2$0.next = 5;
            break;
          }

          context$2$0.next = 4;
          return _regeneratorRuntime.awrap(this.getPk());

        case 4:
          context$2$0.t1 = context$2$0.sent;

        case 5:
          context$2$0.t0 = context$2$0.t1;

          if (context$2$0.t0) {
            context$2$0.next = 8;
            break;
          }

          context$2$0.t0 = '*';

        case 8:
          field = context$2$0.t0;
          return context$2$0.abrupt('return', this.getField('AVG(' + field + ') AS think_avg', true));

        case 10:
        case 'end':
          return context$2$0.stop();
      }
    }, null, this);
  };

  /**
   * query
   * @return {Promise} []
   */

  _default.prototype.query = function query() {
    var sql = this.parseSql.apply(this, arguments);
    return this.db().select(sql, this._options.cache);
  };

  /**
   * execute sql
   * @param  {[type]} sql   [description]
   * @param  {[type]} parse [description]
   * @return {[type]}       [description]
   */

  _default.prototype.execute = function execute() {
    var sql = this.parseSql.apply(this, arguments);
    return this.db().execute(sql);
  };

  /**
   * parse sql
   * @return promise [description]
   */

  _default.prototype.parseSql = function parseSql() {
    var _this4 = this;

    var sql = _util2['default'].format.apply(_util2['default'], arguments);
    //replace table name
    return sql.replace(/\s__([A-Z]+)__\s/g, function (a, b) {
      if (b === 'TABLE') {
        return ' `' + _this4.getTableName() + '` ';
      }
      return ' `' + _this4.getTablePrefix() + b.toLowerCase() + '` ';
    });
  };

  /**
   * start transaction
   * @return {Promise} []
   */

  _default.prototype.startTrans = function startTrans() {
    return this.db().startTrans();
  };

  /**
   * commit transcation
   * @return {Promise} []
   */

  _default.prototype.commit = function commit() {
    return this.db().commit();
  };

  /**
   * rollback transaction
   * @return {Promise} []
   */

  _default.prototype.rollback = function rollback() {
    return this.db().rollback();
  };

  /**
   * transaction exec functions
   * @param  {Function} fn [exec function]
   * @return {Promise}      []
   */

  _default.prototype.transaction = function transaction(fn) {
    var result;
    return _regeneratorRuntime.async(function transaction$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          result = undefined;
          context$2$0.next = 3;
          return _regeneratorRuntime.awrap(this.startTrans());

        case 3:
          context$2$0.prev = 3;
          context$2$0.next = 6;
          return _regeneratorRuntime.awrap(think.co(fn));

        case 6:
          result = context$2$0.sent;
          context$2$0.next = 9;
          return _regeneratorRuntime.awrap(this.commit());

        case 9:
          context$2$0.next = 15;
          break;

        case 11:
          context$2$0.prev = 11;
          context$2$0.t0 = context$2$0['catch'](3);
          context$2$0.next = 15;
          return _regeneratorRuntime.awrap(this.rollback());

        case 15:
          return context$2$0.abrupt('return', result);

        case 16:
        case 'end':
          return context$2$0.stop();
      }
    }, null, this, [[3, 11]]);
  };

  return _default;
})(_baseJs2['default']);

exports['default'] = _default;
module.exports = exports['default'];

//get primary key

//check data is empty

//check where condition

//get where condition from data

//get page options