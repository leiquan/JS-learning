'use strict';

/**
 * base model class
 */

var _inherits = require('babel-runtime/helpers/inherits')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

exports.__esModule = true;

var _default = (function (_think$base) {
  _inherits(_default, _think$base);

  function _default() {
    _classCallCheck(this, _default);

    _think$base.apply(this, arguments);
  }

  /**
   * init
   * @param  {} name   []
   * @param  {} config []
   * @return {}        []
   */

  _default.prototype.init = function init() {
    var name = arguments.length <= 0 || arguments[0] === undefined ? '' : arguments[0];
    var config = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

    var options = {
      pk: 'id', //primary key
      name: '', //model name
      tablePrefix: undefined, //table prefix
      tableName: '', //table name, without prefix
      /**
       * fields list
       * {
       *   name: {
       *     type: 'string',
       *     required: true,
       *     default: '',
       *     unique: true,
       *     primary: true,
       *     auto_increment: true
       *   }
       * }
       */
      fields: {}, //table fields
      /**
       * table indexes
       * {
       *   name: {name: 1, $unique: true}, //single indexes
       *   test1: {name1: 1, title1: 1, $unique: 1}, //compound indexes
       * }
       * @type {Object}
       */
      indexes: {},
      readonlyFields: [] // readonly fields
    };
    //if is set in subclass, can't be override
    for (var key in options) {
      if (this[key] === undefined) {
        this[key] = options[key];
      }
    }

    if (think.isObject(name)) {
      config = name;
      name = '';
    }

    this.config = config;
    this._db = null;
    this._data = {};
    this._options = {};

    //model name
    if (name) {
      this.name = name;
    }
    // get table prefix from config
    if (this.config.prefix && this.tablePrefix === undefined) {
      this.tablePrefix = this.config.prefix;
    }
  };

  /**
   * get model instance
   * @param  {String} name    [model name]
   * @param  {Object} options [options]
   * @return {Object}         []
   */

  _default.prototype.model = function model(name, options, module) {
    if (think.isString(options)) {
      module = options;
      options = {};
    }
    if (!module) {
      var filename = this.__filename || __filename;
      var seps = filename.split('/').reverse();
      module = seps[2];
    }
    options = think.extend({}, this.config, options);
    return think.model(name, options, module);
  };

  /**
   * get table prefix
   * @return {String} []
   */

  _default.prototype.getTablePrefix = function getTablePrefix() {
    return this.tablePrefix || '';
  };

  /**
   * get db instance
   * @return {Object} []
   */

  _default.prototype.db = function db() {
    if (this._db) {
      return this._db;
    }
    var DB = think.adapter('db', this.config.type || 'mysql');
    this._db = new DB(this.config);
    return this._db;
  };

  /**
   * get model name
   * @return {String} []
   */

  _default.prototype.getModelName = function getModelName() {
    if (this.name) {
      return this.name;
    }
    var filename = this.__filename || __filename;
    var last = filename.lastIndexOf('/');
    this.name = filename.substr(last + 1, filename.length - last - 4);
    return this.name;
  };

  /**
   * get table name
   * @return {String} []
   */

  _default.prototype.getTableName = function getTableName() {
    if (!this.tableName) {
      this.tableName = this.getModelName();
    }
    return this.getTablePrefix() + this.tableName;
  };

  /**
   * set cache options
   * @param  {String} key     []
   * @param  {Number} timeout []
   * @return {}         []
   */

  _default.prototype.cache = function cache(key) {
    var timeout = arguments.length <= 1 || arguments[1] === undefined ? this.config.cache.timeout : arguments[1];

    if (key === undefined) {
      return this;
    }
    var options = undefined;
    if (!think.isObject(key)) {
      if (think.isNumber(key)) {
        timeout = key;
        key = '';
      }
      options = think.extend({}, this.config.cache, { key: key, timeout: timeout });
    } else {
      options = key;
    }
    this._options.cache = options;
    return this;
  };

  /**
   * set limit options
   * @param  {Number} offset []
   * @param  {Number} length []
   * @return {}        []
   */

  _default.prototype.limit = function limit(offset, length) {
    if (offset === undefined) {
      return this;
    }
    offset = Math.max(parseInt(offset) || 0, 0);
    if (length) {
      length = Math.max(parseInt(length) || 0, 0);
    }
    this._options.limit = [offset, length];
    return this;
  };

  /**
   * set page options
   * @param  {Number} page     []
   * @param  {} listRows []
   * @return {}          []
   */

  _default.prototype.page = function page(_page) {
    var listRows = arguments.length <= 1 || arguments[1] === undefined ? this.config.nums_per_page : arguments[1];

    if (_page === undefined) {
      return this;
    }
    if (think.isArray(_page)) {
      listRows = _page[1] || listRows;
      _page = _page[0];
    }
    _page = Math.max(parseInt(_page) || 1, 1);
    listRows = Math.max(parseInt(listRows) || 1, 1);
    this._options.limit = [listRows * (_page - 1), listRows];
    return this;
  };

  /**
   * set where options
   * @return {} []
   */

  _default.prototype.where = function where(_where) {
    if (!_where) {
      return this;
    }
    if (think.isString(_where)) {
      _where = { _string: _where };
    }
    this._options.where = think.extend(this._options.where || {}, _where);
    return this;
  };

  /**
   * set field options
   * @param  {String} field   []
   * @param  {Boolean} reverse []
   * @return {}         []
   */

  _default.prototype.field = function field(_field) {
    var reverse = arguments.length <= 1 || arguments[1] === undefined ? false : arguments[1];

    if (!_field) {
      return this;
    }
    if (think.isString(_field)) {
      if (_field.indexOf(')') === -1) {
        _field = _field.split(/\s*,\s*/);
      }
    }
    this._options.field = _field;
    this._options.fieldReverse = reverse;
    return this;
  };

  /**
   * set field reverse
   * @param  {String} field [field list]
   * @return {Object}       []
   */

  _default.prototype.fieldReverse = function fieldReverse(field) {
    return this.field(field, true);
  };

  /**
   * set table name
   * @param  {String} table []
   * @return {}       []
   */

  _default.prototype.table = function table(_table, hasPrefix) {
    if (!_table) {
      return this;
    }
    _table = _table.trim();
    //table is sql, `SELECT * FROM`
    if (_table.indexOf(' ') > -1) {
      hasPrefix = true;
    }
    this._options.table = hasPrefix ? _table : this.getTablePrefix() + _table;
    return this;
  };

  /**
   * union options
   * @param  {} union []
   * @param  {} all   []
   * @return {}       []
   */

  _default.prototype.union = function union(_union) {
    var all = arguments.length <= 1 || arguments[1] === undefined ? false : arguments[1];

    if (!_union) {
      return this;
    }
    if (!this._options.union) {
      this._options.union = [];
    }
    this._options.union.push({
      union: _union,
      all: all
    });
    return this;
  };

  /**
   * .join({
   *   'xxx': {
   *     join: 'left',
   *     as: 'c',
   *     on: ['id', 'cid']
   *   }
   * })
   * @param  {[type]} join [description]
   * @return {[type]}      [description]
   */

  _default.prototype.join = function join(_join) {
    if (!_join) {
      return this;
    }
    if (!this._options.join) {
      this._options.join = [];
    }
    if (think.isArray(_join)) {
      this._options.join = this._options.join.concat(_join);
    } else {
      this._options.join.push(_join);
    }
    return this;
  };

  /**
   * set order options
   * @param  {String} value []
   * @return {}       []
   */

  _default.prototype.order = function order(value) {
    this._options.order = value;
    return this;
  };

  /**
   * set table alias
   * @param  {String} value []
   * @return {}       []
   */

  _default.prototype.alias = function alias(value) {
    this._options.alias = value;
    return this;
  };

  /**
   * set having options
   * @param  {String} value []
   * @return {}       []
   */

  _default.prototype.having = function having(value) {
    this._options.having = value;
    return this;
  };

  /**
   * set group options
   * @param  {String} value []
   * @return {}       []
   */

  _default.prototype.group = function group(value) {
    this._options.group = value;
    return this;
  };

  /**
   * set lock options
   * @param  {String} value []
   * @return {}       []
   */

  _default.prototype.lock = function lock(value) {
    this._options.lock = value;
    return this;
  };

  /**
   * set auto options
   * @param  {String} value []
   * @return {}       []
   */

  _default.prototype.auto = function auto(value) {
    this._options.auto = value;
    return this;
  };

  /**
   * set filter options
   * @param  {String} value []
   * @return {}       []
   */

  _default.prototype.filter = function filter(value) {
    this._options.filter = value;
    return this;
  };

  /**
   * set distinct options
   * @param  {String} data []
   * @return {}      []
   */

  _default.prototype.distinct = function distinct(data) {
    this._options.distinct = data;
    if (think.isString(data)) {
      this._options.field = data;
    }
    return this;
  };

  /**
   * set explain
   * @param  {Boolean} explain []
   * @return {}         []
   */

  _default.prototype.explain = function explain(_explain) {
    this._options.explain = _explain;
    return this;
  };

  /**
   * options filter
   * @param  {Object} options []
   * @return {}         []
   */

  _default.prototype.optionsFilter = function optionsFilter(options) {
    return options;
  };

  /**
   * data filter
   * @param  {Object} data []
   * @return {}      []
   */

  _default.prototype.dataFilter = function dataFilter(data) {
    return data;
  };

  /**
   * before add
   * @param  {Object} data []
   * @return {}      []
   */

  _default.prototype.beforeAdd = function beforeAdd(data) {
    return data;
  };

  /**
   * after add
   * @param  {} data []
   * @return {}      []
   */

  _default.prototype.afterAdd = function afterAdd(data) {
    return data;
  };

  /**
   * after delete
   * @param  {Mixed} data []
   * @return {}      []
   */

  _default.prototype.afterDelete = function afterDelete(data) {
    return data;
  };

  /**
   * before update
   * @param  {Mixed} data []
   * @return {}      []
   */

  _default.prototype.beforeUpdate = function beforeUpdate(data) {
    return data;
  };

  /**
   * after update
   * @param  {} data    []
   * @param  {} options []
   * @return {}         []
   */

  _default.prototype.afterUpdate = function afterUpdate(data) {
    return data;
  };

  /**
   * after find
   * @return {} []
   */

  _default.prototype.afterFind = function afterFind(data) {
    return data;
  };

  /**
   * after select
   * @param  {Mixed} result []
   * @return {}        []
   */

  _default.prototype.afterSelect = function afterSelect(data) {
    return data;
  };

  /**
   * set data
   * @param  {Mixed} data []
   * @return {}      []
   */

  _default.prototype.data = function data(_data) {
    if (_data === true) {
      return this._data;
    }
    this._data = _data;
    return this;
  };

  /**
   * set options
   * @param  {Mixed} options []
   * @return {}         []
   */

  _default.prototype.options = function options() {
    var _options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

    if (_options === true) {
      return this._options;
    }
    this._options = _options;
    //page to limit
    if (_options.page) {
      this.page(_options.page);
    }
    return this;
  };

  /**
   * close db socket
   * @return {} []
   */

  _default.prototype.close = function close() {
    if (this._db) {
      this._db.close();
      this._db = null;
    }
  };

  return _default;
})(think.base);

exports['default'] = _default;
module.exports = exports['default'];