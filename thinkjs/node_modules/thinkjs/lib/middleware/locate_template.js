'use strict';

var _inherits = require('babel-runtime/helpers/inherits')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

exports.__esModule = true;

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

/**
 * find template file path
 * @param  {String}  
 * @return {Class}
 */

var _default = (function (_think$middleware$base) {
  _inherits(_default, _think$middleware$base);

  function _default() {
    _classCallCheck(this, _default);

    _think$middleware$base.apply(this, arguments);
  }

  /**
   * get path prefix
   * @return {String} []
   */

  _default.prototype.getPathPrefix = function getPathPrefix(module) {
    var pathPrefix = undefined,
        http = this.http,
        prefix = '';
    var root_path = this.options.root_path;

    var theme = http.theme();
    var lang = http._langAsViewPath && http.lang();

    module = module || http.module;

    //support locale
    if (lang) {
      prefix += '/' + lang;
    }
    //support theme
    if (theme) {
      prefix += '/' + theme;
    }

    //view root path is defined
    if (root_path) {
      pathPrefix = _path2['default'].normalize(root_path);
      if (think.mode !== think.mode_mini) {
        pathPrefix += prefix + '/' + module;
      }
    } else {
      pathPrefix = think.getPath(module, think.dirname.view, prefix);
    }

    return pathPrefix;
  };

  /**
   * run
   * @param  {String} templateFile [template filepath]
   * @return {}              []
   */

  _default.prototype.run = function run(options) {
    if (!think.isObject(options)) {
      options = think.extend({
        templateFile: options
      }, this.config('view'));
    }
    this.options = options;

    var templateFile = options.templateFile;
    //is absolute file path
    if (templateFile && _path2['default'].isAbsolute(templateFile)) {
      return templateFile;
    }
    var http = this.http;
    var _options = options;
    var file_depr = _options.file_depr;
    var file_ext = _options.file_ext;

    var pathPrefix = this.getPathPrefix();

    // this.display()
    if (!templateFile) {
      return _path2['default'].normalize(pathPrefix + '/' + http.controller + file_depr + http.action + file_ext);
    }
    //replace : to /
    templateFile = templateFile.replace(/\:/g, '/');
    // this.display('detail')
    // this.display('index/detail')
    // this.display('admin/index/detail')
    // this.display('admin/index/detail.html')
    var paths = templateFile.split('/');
    var action = paths.pop();
    var controller = paths.pop() || http.controller;
    var module = paths.pop() || http.module;

    if (module !== http.module) {
      pathPrefix = this.getPathPrefix(module);
    }

    templateFile = pathPrefix + '/' + controller + file_depr + action;
    if (action.indexOf('.') === -1) {
      templateFile += file_ext;
    }
    return _path2['default'].normalize(templateFile);
  };

  return _default;
})(think.middleware.base);

exports['default'] = _default;
module.exports = exports['default'];