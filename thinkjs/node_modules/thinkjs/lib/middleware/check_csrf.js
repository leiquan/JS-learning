'use strict';
/**
 * check csrf
 * @type {}
 */

var _inherits = require('babel-runtime/helpers/inherits')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

exports.__esModule = true;

var _default = (function (_think$middleware$base) {
  _inherits(_default, _think$middleware$base);

  function _default() {
    _classCallCheck(this, _default);

    _think$middleware$base.apply(this, arguments);
  }

  /**
   * run
   * @return {Promise} []
   */

  _default.prototype.run = function run() {
    var csrf, session, isGet, isPost, isAjax, isJsonp, value, formValue;
    return _regeneratorRuntime.async(function run$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          csrf = this.config('csrf');

          if (csrf.on) {
            context$2$0.next = 3;
            break;
          }

          return context$2$0.abrupt('return');

        case 3:

          think.session(this.http);
          session = this.http._session;
          isGet = this.http.isGet();
          isPost = this.http.isPost();
          isAjax = this.http.isAjax();
          isJsonp = this.http.isJsonp();

          if (!(isGet && !isAjax && !isJsonp)) {
            context$2$0.next = 20;
            break;
          }

          context$2$0.next = 12;
          return _regeneratorRuntime.awrap(session.get(csrf.session_name));

        case 12:
          value = context$2$0.sent;

          if (value) {
            context$2$0.next = 17;
            break;
          }

          value = think.uuid(32);
          context$2$0.next = 17;
          return _regeneratorRuntime.awrap(session.set(csrf.session_name, value));

        case 17:
          this.http.view().assign(csrf.form_name, value);
          context$2$0.next = 27;
          break;

        case 20:
          if (!(isPost || isAjax || isJsonp)) {
            context$2$0.next = 27;
            break;
          }

          context$2$0.next = 23;
          return _regeneratorRuntime.awrap(session.get(csrf.session_name));

        case 23:
          value = context$2$0.sent;
          formValue = this.http[isPost ? 'post' : 'param'](csrf.form_name);

          if (!(!value || formValue !== value)) {
            context$2$0.next = 27;
            break;
          }

          return context$2$0.abrupt('return', this.http.fail(csrf.errno, csrf.errmsg));

        case 27:
        case 'end':
          return context$2$0.stop();
      }
    }, null, this);
  };

  return _default;
})(think.middleware.base);

exports['default'] = _default;
module.exports = exports['default'];