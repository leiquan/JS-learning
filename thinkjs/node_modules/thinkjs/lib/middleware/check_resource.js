'use strict';
/**
 * resource check
 * @param  {}            
 * @return {}     []
 */

var _inherits = require('babel-runtime/helpers/inherits')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

exports.__esModule = true;

var _default = (function (_think$middleware$base) {
  _inherits(_default, _think$middleware$base);

  function _default() {
    _classCallCheck(this, _default);

    _think$middleware$base.apply(this, arguments);
  }

  /**
   * run
   * @return {Promise} []
   */

  _default.prototype.run = function run() {
    var pathname, reg, file;
    return _regeneratorRuntime.async(function run$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          if (!(!think.RESOURCE_PATH || !this.config('resource_on') || !this.http.pathname)) {
            context$2$0.next = 2;
            break;
          }

          return context$2$0.abrupt('return', false);

        case 2:
          pathname = this.http.pathname;
          reg = this.config('resource_reg');

          if (reg.test(pathname)) {
            context$2$0.next = 6;
            break;
          }

          return context$2$0.abrupt('return', false);

        case 6:
          file = think.RESOURCE_PATH + '/' + pathname;

          if (!think.isFile(file)) {
            context$2$0.next = 11;
            break;
          }

          return context$2$0.abrupt('return', file);

        case 11:
          return context$2$0.abrupt('return', true);

        case 12:
        case 'end':
          return context$2$0.stop();
      }
    }, null, this);
  };

  return _default;
})(think.middleware.base);

exports['default'] = _default;
module.exports = exports['default'];

//resource exist