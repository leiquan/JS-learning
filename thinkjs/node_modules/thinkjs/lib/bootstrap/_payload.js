'use strict';

var _Object$keys = require('babel-runtime/core-js/object/keys')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _os = require('os');

var _os2 = _interopRequireDefault(_os);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _querystring = require('querystring');

var _querystring2 = _interopRequireDefault(_querystring);

var _multiparty = require('multiparty');

var _multiparty2 = _interopRequireDefault(_multiparty);

/**
 * parse data by form
 * @param  {} http []
 * @return {}      []
 */
think.middleware('parse_form_payload', function (http) {

  if (!http.req.readable) {
    return;
  }

  var multiReg = /^multipart\/(form-data|related);\s*boundary=(?:"([^"]+)"|([^;]+))$/i;
  //file upload by form or FormData
  if (!multiReg.test(http.req.headers['content-type'])) {
    return;
  }

  var deferred = think.defer();
  var uploadDir = think.config('post.file_upload_path') || _os2['default'].tmpdir() + '/thinkjs_upload';
  think.mkdir(uploadDir);

  var postConfig = think.config('post');
  var form = new _multiparty2['default'].Form({
    maxFieldsSize: postConfig.max_fields_size,
    maxFields: postConfig.max_fields,
    maxFilesSize: postConfig.max_file_size,
    uploadDir: uploadDir
  });
  //support for file with multiple="multiple"
  var files = http._file;
  form.on('file', function (name, value) {
    if (name in files) {
      if (!think.isArray(files[name])) {
        files[name] = [files[name]];
      }
      files[name].push(value);
    } else {
      files[name] = value;
    }
  });
  form.on('field', function (name, value) {
    http._post[name] = value;
  });
  form.on('close', function () {
    deferred.resolve(http);
  });
  form.on('error', function () {
    http.res.statusCode = 400;
    http.end();
  });
  form.parse(http.req);
  return deferred.promise;
});

/**
 * parse upload file by ajax
 * @param  {} http []
 * @return {}      []
 */
think.middleware('parse_single_file_payload', function (http) {

  if (!http.req.readable) {
    return;
  }

  var filename = http.req.headers[think.config('post.single_file_header')];
  if (!filename) {
    return;
  }

  var deferred = think.defer();
  var uploadDir = think.config('post.file_upload_path') || _os2['default'].tmpdir() + '/thinkjs_upload';
  think.mkdir(uploadDir);

  var name = think.uuid(20);
  var filepath = uploadDir + '/' + name + _path2['default'].extname(filename).slice(0, 5);
  var stream = _fs2['default'].createWriteStream(filepath);
  http.req.pipe(stream);
  stream.on('error', function () {
    http.res.statusCode = 400;
    http.end();
  });
  stream.on('close', function () {
    http._file.file = {
      fieldName: 'file',
      originalFilename: filename,
      path: filepath,
      size: _fs2['default'].statSync(filepath).size
    };
    deferred.resolve();
  });
  return deferred.promise;
});

/**
 * parse payload
 * @param  {Object} http
 * @return {}         []
 */
think.middleware('parse_json_payload', function (http) {

  if (!http.req.readable) {
    return;
  }

  var types = http.config('post.json_content_type');
  if (types.indexOf(http.type()) === -1) {
    return;
  }
  return http.getPayload().then(function (payload) {
    try {
      http._post = think.extend(http._post, JSON.parse(payload));
    } catch (e) {}
  });
});

/**
 * parse payload by querystring
 * @param  {Object} http []
 * @return {[type]}      []
 */
think.middleware('parse_querystring_payload', function (http) {

  if (!http.req.readable) {
    return;
  }

  return http.getPayload().then(function (payload) {
    try {
      http._post = think.extend(http._post, _querystring2['default'].parse(payload));
    } catch (e) {}
  });
});

/**
 * validate data parsed from payload 
 * @param  {Object} http []
 * @return {}      []
 */
think.middleware('validate_payload', function (http) {
  var post = http._post;
  var length = _Object$keys(post).length;
  if (length > think.config('post.max_fields')) {
    http.res.statusCode = 400;
    http.end();
    return think.prevent();
  }
  var maxFilesSize = think.config('post.max_fields_size');
  for (var _name in post) {
    if (post[_name] && post[_name].length > maxFilesSize) {
      http.res.statusCode = 400;
      http.end();
      return think.prevent();
    }
  }
});