'use strict';

var _inherits = require('babel-runtime/helpers/inherits')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

exports.__esModule = true;

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

/**
 * REST Base Controller
 * @return {} []
 */

var _default = (function (_think$controller$base) {
  _inherits(_default, _think$controller$base);

  function _default() {
    _classCallCheck(this, _default);

    _think$controller$base.apply(this, arguments);
  }

  /**
   * init
   * @param  {Object} http []
   * @return {}      []
   */

  _default.prototype.init = function init(http) {
    _think$controller$base.prototype.init.call(this, http);

    this._isRest = true;
    this._method = '';

    this.resource = this.getResource();
    this.id = this.getId();
    this.modelInstance = this.model(this.resource);
  };

  /**
   * get resource
   * @return {String} [resource name]
   */

  _default.prototype.getResource = function getResource() {
    var filename = this.__filename || __filename;
    var last = filename.lastIndexOf(_path2['default'].sep);
    return filename.substr(last + 1, filename.length - last - 4);
  };

  /**
   * get resource id
   * @return {String} []
   */

  _default.prototype.getId = function getId() {
    var id = this.get('id');
    if (id && think.isString(id) || think.isNumber(id)) {
      return id;
    }
    var last = this.http.pathname.split(_path2['default'].sep).slice(-1)[0];
    if (last !== this.resource) {
      return last;
    }
    return '';
  };

  /**
   * get resource
   * @return {Promise} []
   */

  _default.prototype.getAction = function getAction() {
    var data, _modelInstance$where, pk;

    return _regeneratorRuntime.async(function getAction$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          data = undefined;

          if (!this.id) {
            context$2$0.next = 9;
            break;
          }

          context$2$0.next = 4;
          return _regeneratorRuntime.awrap(this.modelInstance.getPk());

        case 4:
          pk = context$2$0.sent;
          context$2$0.next = 7;
          return _regeneratorRuntime.awrap(this.modelInstance.where((_modelInstance$where = {}, _modelInstance$where[pk] = this.id, _modelInstance$where)).find());

        case 7:
          data = context$2$0.sent;
          return context$2$0.abrupt('return', this.success(data));

        case 9:
          context$2$0.next = 11;
          return _regeneratorRuntime.awrap(this.modelInstance.select());

        case 11:
          data = context$2$0.sent;
          return context$2$0.abrupt('return', this.success(data));

        case 13:
        case 'end':
          return context$2$0.stop();
      }
    }, null, this);
  };

  /**
   * put resource
   * @return {Promise} []
   */

  _default.prototype.postAction = function postAction() {
    var pk, data, insertId;
    return _regeneratorRuntime.async(function postAction$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.next = 2;
          return _regeneratorRuntime.awrap(this.modelInstance.getPk());

        case 2:
          pk = context$2$0.sent;
          data = this.post();

          delete data[pk];

          if (!think.isEmpty(data)) {
            context$2$0.next = 7;
            break;
          }

          return context$2$0.abrupt('return', this.fail('data is empty'));

        case 7:
          context$2$0.next = 9;
          return _regeneratorRuntime.awrap(this.modelInstance.add(data));

        case 9:
          insertId = context$2$0.sent;
          return context$2$0.abrupt('return', this.success({ id: insertId }));

        case 11:
        case 'end':
          return context$2$0.stop();
      }
    }, null, this);
  };

  /**
   * delete resource
   * @return {Promise} []
   */

  _default.prototype.deleteAction = function deleteAction() {
    var _modelInstance$where2;

    var pk, rows;
    return _regeneratorRuntime.async(function deleteAction$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          if (this.id) {
            context$2$0.next = 2;
            break;
          }

          return context$2$0.abrupt('return', this.fail('params error'));

        case 2:
          context$2$0.next = 4;
          return _regeneratorRuntime.awrap(this.modelInstance.getPk());

        case 4:
          pk = context$2$0.sent;
          context$2$0.next = 7;
          return _regeneratorRuntime.awrap(this.modelInstance.where((_modelInstance$where2 = {}, _modelInstance$where2[pk] = this.id, _modelInstance$where2))['delete']());

        case 7:
          rows = context$2$0.sent;
          return context$2$0.abrupt('return', this.success({ affectedRows: rows }));

        case 9:
        case 'end':
          return context$2$0.stop();
      }
    }, null, this);
  };

  /**
   * update resource
   * @return {Promise} []
   */

  _default.prototype.putAction = function putAction() {
    var _modelInstance$where3;

    var pk, data, rows;
    return _regeneratorRuntime.async(function putAction$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          if (this.id) {
            context$2$0.next = 2;
            break;
          }

          return context$2$0.abrupt('return', this.fail('params error'));

        case 2:
          context$2$0.next = 4;
          return _regeneratorRuntime.awrap(this.modelInstance.getPk());

        case 4:
          pk = context$2$0.sent;
          data = this.post();

          delete data[pk];

          if (!think.isEmpty(data)) {
            context$2$0.next = 9;
            break;
          }

          return context$2$0.abrupt('return', this.fail('data is empty'));

        case 9:
          context$2$0.next = 11;
          return _regeneratorRuntime.awrap(this.modelInstance.where((_modelInstance$where3 = {}, _modelInstance$where3[pk] = this.id, _modelInstance$where3)).update(data));

        case 11:
          rows = context$2$0.sent;
          return context$2$0.abrupt('return', this.success({ affectedRows: rows }));

        case 13:
        case 'end':
          return context$2$0.stop();
      }
    }, null, this);
  };

  /**
   * call
   * @return {Promise} []
   */

  _default.prototype.__call = function __call() {
    return this.fail(think.locale('ACTION_INVALID', this.http.action, this.http.url));
  };

  return _default;
})(think.controller.base);

exports['default'] = _default;
module.exports = exports['default'];