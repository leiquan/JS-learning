'use strict';

var _inherits = require('babel-runtime/helpers/inherits')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

exports.__esModule = true;

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

/**
 * base controller class
 * all controllers will inherits this class
 */

var _default = (function (_think$http$base) {
  _inherits(_default, _think$http$base);

  function _default() {
    _classCallCheck(this, _default);

    _think$http$base.apply(this, arguments);
  }

  /**
   * init
   * @return {void} []
   */

  _default.prototype.init = function init(http) {
    _think$http$base.prototype.init.call(this, http);
    this.assign('controller', this);
    this.assign('http', this.http);
    this.assign('config', this.http._config);
    this.assign('_', this.locale.bind(this));
  };

  /**
   * get client ip
   * @return {String} []
   */

  _default.prototype.ip = function ip() {
    return this.http.ip();
  };

  /**
   * init view instance
   * @return {Object} []
   */

  _default.prototype.view = function view() {
    return this.http.view();
  };

  /**
   * get http method
   * @return {String} []
   */

  _default.prototype.method = function method() {
    return this.http.method.toLowerCase();
  };

  /**
   * check http method
   * @param  {String}  method [http method]
   * @return {Boolean}        []
   */

  _default.prototype.isMethod = function isMethod(method) {
    return this.http.method === method.toUpperCase();
  };

  /**
   * check http method is get
   * @return {Boolean} []
   */

  _default.prototype.isGet = function isGet() {
    return this.http.isGet();
  };

  /**
   * check http method is post
   * @return {Boolean} []
   */

  _default.prototype.isPost = function isPost() {
    return this.http.isPost();
  };

  /**
   * check is ajax request
   * @param  {String}  method [http method]
   * @return {Boolean}        []
   */

  _default.prototype.isAjax = function isAjax(method) {
    return this.http.isAjax(method);
  };

  /**
   * check is websocket request
   * @return {Boolean} []
   */

  _default.prototype.isWebSocket = function isWebSocket() {
    return !!this.http.socket;
  };

  /**
   * check is command line invoke
   * @return {Boolean} []
   */

  _default.prototype.isCli = function isCli() {
    return !!think.cli;
  };

  /**
   * check is jsonp
   * @param  {String}  name [callback name]
   * @return {Boolean}      []
   */

  _default.prototype.isJsonp = function isJsonp(name) {
    return this.http.isJsonp(name);
  };

  /**
   * get or check token
   * @param  {String} token []
   * @return {String | Boolean}       []
   */
  // async token(token){
  //   let tokenConfig = this.config('token');
  //   let tokenValue = await this.session(tokenConfig.name);
  //   if (token) {
  //     return tokenValue === token;
  //   }else{
  //     if(tokenValue){
  //       return tokenValue;
  //     }
  //     token = think.uuid(tokenConfig.length);
  //     await this.session(tokenConfig.name, token);
  //     return token;
  //   }
  // }
  /**
   * get get params
   * @param  {String} name [query name]
   * @return {String}      []
   */

  _default.prototype.get = function get(name, value) {
    return this.http.get(name, value);
  };

  /**
   * get post params
   * @param  {String} name [query name]
   * @return {String}      []
   */

  _default.prototype.post = function post(name, value) {
    return this.http.post(name, value);
  };

  /**
   * get post or get params
   * @param  {String} name []
   * @return {String}      []
   */

  _default.prototype.param = function param(name) {
    return this.http.param(name);
  };

  /**
   * get upload files
   * @param  {String} name []
   * @return {Object}      []
   */

  _default.prototype.file = function file(name, value) {
    return this.http.file(name, value);
  };

  /**
   * get or set header
   * @param  {String} name  [header name]
   * @param  {String} value [header value]
   * @return {}       []
   */

  _default.prototype.header = function header(name, value) {
    return this.http.header(name, value);
  };

  /**
   * get user agent
   * @return {String} []
   */

  _default.prototype.userAgent = function userAgent() {
    return this.http.userAgent();
  };

  /**
   * get page referer
   * @param  {String} host [only get referer host]
   * @return {String}      []
   */

  _default.prototype.referrer = function referrer(onlyHost) {
    return this.http.referrer(onlyHost);
  };

  /**
   * get page referer
   * @param  {String} host [only get referer host]
   * @return {String}      []
   */

  _default.prototype.referer = function referer(onlyHost) {
    return this.http.referrer(onlyHost);
  };

  /**
   * get or set cookie
   * @param  {String} name    [cookie name]
   * @param  {String} value   [cookie value]
   * @param  {Object} options [cookie options]
   * @return {}         []
   */

  _default.prototype.cookie = function cookie(name, value, options) {
    return this.http.cookie(name, value, options);
  };

  /**
   * get or set session
   * @param  {String} name  [session name]
   * @param  {mixed} value [session value]
   * @return {Promise}       []
   */

  _default.prototype.session = function session(name, value) {
    return this.http.session(name, value);
  };

  /**
   * get language
   * @param  {Boolean} useCookie [get from cookie set]
   * @return {String}           []
   */

  _default.prototype.lang = function lang(_lang, asViewPath) {
    return this.http.lang(_lang, asViewPath);
  };

  /**
   * get locale value
   * @param  {String} key []
   * @return {String}     []
   */

  _default.prototype.locale = function locale(key) {
    var _http;

    for (var _len = arguments.length, data = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      data[_key - 1] = arguments[_key];
    }

    return (_http = this.http).locale.apply(_http, [key].concat(data));
  };

  /**
   * redirect
   * @param  {String} url  [redirect url]
   * @param  {Number} code [301 or 302]
   * @return {promise}      [pedding promise]
   */

  _default.prototype.redirect = function redirect(url, code) {
    this.http.redirect(url, code);
    return think.prevent();
  };

  /**
   * assign value to template
   * @param  {String} name  [template name]
   * @param  {mixed} value []
   * @return {}       []
   */

  _default.prototype.assign = function assign(name, value) {
    return this.view().assign(name, value);
  };

  /**
   * fetch template content
   * @param  {String} templateFile [template filepath]
   * @return {promise}              []
   */

  _default.prototype.fetch = function fetch(templateFile) {
    return this.view().fetch(templateFile);
  };

  /**
   * display template
   * @param  {String} templateFile [template filepath]
   * @param  {String} charset      [content encoding]
   * @param  {String} contentType  [content type]
   * @return {Promise}              []
   */

  _default.prototype.display = function display(templateFile, charset, contentType) {
    return this.view().display(templateFile, charset, contentType);
  };

  /**
   * output with jsonp
   * @param  {Object} data [output data]
   * @return {}      []
   */

  _default.prototype.jsonp = function jsonp(data) {
    this.http.jsonp(data);
    return think.prevent();
  };

  /**
   * output with json
   * @param  {Object} data [output data]
   * @return {Promise}      []
   */

  _default.prototype.json = function json(data) {
    this.http.json(data);
    return think.prevent();
  };

  /**
   * set http status code
   * @param  {Number} status [status code]
   * @return {}        []
   */

  _default.prototype.status = function status() {
    var _status = arguments.length <= 0 || arguments[0] === undefined ? 404 : arguments[0];

    this.http.status(_status);
    return this;
  };

  /**
   * deny request
   * @param  {Number} status [status code]
   * @return {[type]}        []
   */

  _default.prototype.deny = function deny() {
    var status = arguments.length <= 0 || arguments[0] === undefined ? 403 : arguments[0];

    this.status(status);
    this.end();
    return think.prevent();
  };

  /**
   * set cache-control and expires header
   * @param  {Number} time []
   * @return {}      []
   */

  _default.prototype.expires = function expires(time) {
    this.http.expires(time);
    return this;
  };

  /**
   * write content
   * @param  {mixed} obj      []
   * @param  {String} encoding [content encoding]
   * @return {}          []
   */

  _default.prototype.write = function write(obj, encoding) {
    return this.http.write(obj, encoding);
  };

  /**
   * end output
   * @param  {Object} obj      []
   * @param  {String} encoding [content encoding]
   * @return {}          []
   */

  _default.prototype.end = function end(obj, encoding) {
    this.http.end(obj, encoding);
    return think.prevent();
  };

  /**
   * send content
   * @param  {Mixed} obj      []
   * @param  {String} encoding []
   * @return {Promise}          []
   */

  _default.prototype.send = function send(obj, encoding) {
    return this.end(obj, encoding);
  };

  /**
   * get or set content type
   * @param  {String} ext [content type]
   * @return {}     []
   */

  _default.prototype.type = function type(ext, encoding) {
    return this.http.type(ext, encoding);
  };

  /**
   * download file
   * @param  {String} file        [filepath]
   * @param  {String} contentType [content type]
   * @param  {String} filename    [download filename]
   * @return {Promise}             []
   */

  _default.prototype.download = function download(filepath, contentType, filename) {
    if (think.isString(contentType) && contentType.indexOf('.') > -1) {
      filename = contentType;
      contentType = '';
    }
    if (!contentType || contentType.indexOf('/') === -1) {
      contentType = require('mime').lookup(contentType || filepath);
    }
    this.type(contentType, false);

    this.header('Content-Disposition', 'attachment; filename="' + (filename || _path2['default'].basename(filepath)) + '"');
    return think.middleware('output_resource', this.http, filepath);
  };

  /**
   * output with success errno & errmsg
   * @param  {Object} data    [output data]
   * @param  {String} message [errmsg]
   * @return {Promise}         [pedding promise]
   */

  _default.prototype.success = function success(data, message) {
    this.http.success(data, message);
    return think.prevent();
  };

  /**
   * output with fail errno & errmsg
   * @param  {Number} errno  [error number]
   * @param  {String} errmsg [error message]
   * @param  {Object} data   [output data]
   * @return {Promise}        [pedding promise]
   */

  _default.prototype.fail = function fail(errno, errmsg, data) {
    this.http.fail(errno, errmsg, data);
    return think.prevent();
  };

  /**
   * alias for fail
   * @param  {} args []
   * @return {Promise}         []
   */

  _default.prototype.error = function error() {
    return this.fail.apply(this, arguments);
  };

  /**
   * send exec time
   * @param  {String} name [header name]
   * @return {}      []
   */

  _default.prototype.sendTime = function sendTime(name) {
    return this.http.sendTime(name);
  };

  /**
   * emit socket data
   * @param  {String} event []
   * @param  {Miex} data  []
   * @return {}       []
   */

  _default.prototype.emit = function emit(event, data) {
    if (!this.http.socket) {
      throw new Error('emit method can only used in websocket request');
    }
    return this.http.socketEmit(event, data);
  };

  /**
   * broadcast socket data
   * @param  {String} event       []
   * @param  {Mixed} data        []
   * @param  {Boolean} containSelf []
   * @return {}             []
   */

  _default.prototype.broadcast = function broadcast(event, data, containSelf) {
    if (!this.http.socket) {
      throw new Error('broadcast method can only used in websocket request');
    }
    return this.http.socketBroadcast(event, data, containSelf);
  };

  return _default;
})(think.http.base);

exports['default'] = _default;
module.exports = exports['default'];