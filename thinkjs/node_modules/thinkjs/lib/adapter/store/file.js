'use strict';

var _inherits = require('babel-runtime/helpers/inherits')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _Promise = require('babel-runtime/core-js/promise')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

exports.__esModule = true;

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

/**
 * file store class
 */

var _default = (function (_think$adapter$base) {
  _inherits(_default, _think$adapter$base);

  function _default() {
    _classCallCheck(this, _default);

    _think$adapter$base.apply(this, arguments);
  }

  /**
   * init
   * @param  {Object} config []
   * @return {}        []
   */

  _default.prototype.init = function init(config) {
    this.config = think.extend({
      path: ''
    }, config);

    if (!this.config.path) {
      throw new Error('path must be defined.');
    }

    if (!think.isDir(this.config.path)) {
      think.mkdir(this.config.path);
    }
  };

  /**
   * get data
   * @param  {String} key []
   * @return {Promise}     []
   */

  _default.prototype.get = function get(key) {
    var filepath = this.config.path + '/' + key;
    if (!think.isFile(filepath)) {
      return _Promise.resolve();
    }
    return think.promisify(_fs2['default'].readFile, _fs2['default'])(filepath, { encoding: 'utf8' });
  };

  /**
   * set file content
   * @param {String} key     []
   * @param {String} content []
   */

  _default.prototype.set = function set(key, content) {
    var filepath = this.config.path + '/' + key;
    think.mkdir(_path2['default'].dirname(filepath));
    var fn = think.promisify(_fs2['default'].writeFile, _fs2['default']);
    return fn(filepath, content).then(function () {
      think.chmod(filepath);
    });
  };

  /**
   * delete file
   * @param  {String} key []
   * @return {Promise}     []
   */

  _default.prototype['delete'] = function _delete(key) {
    var filepath = this.config.path + '/' + key;
    if (!think.isFile(filepath)) {
      return _Promise.resolve();
    }
    return think.promisify(_fs2['default'].unlink, _fs2['default'])(filepath);
  };

  /**
   * get all files
   * @return {Promise} []
   */

  _default.prototype.list = function list() {
    return _Promise.resolve(think.getFiles(this.config.path));
  };

  return _default;
})(think.adapter.base);

exports['default'] = _default;
module.exports = exports['default'];