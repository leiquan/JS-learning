'use strict';
/**
 * store base class
 */

var _inherits = require('babel-runtime/helpers/inherits')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _Promise = require('babel-runtime/core-js/promise')['default'];

exports.__esModule = true;

var _default = (function (_think$adapter$base) {
  _inherits(_default, _think$adapter$base);

  function _default() {
    _classCallCheck(this, _default);

    _think$adapter$base.apply(this, arguments);
  }

  /**
   * init
   * @return {} []
   */

  _default.prototype.init = function init(config) {
    this.config = think.extend({
      type: thinkCache.MEMORY
    }, config);

    this.data = thinkCache(this.config.type);
  };

  /**
   * get content
   * @param  {String} key []
   * @return {Promise}     []
   */

  _default.prototype.get = function get(key) {
    return _Promise.resolve(this.data[key]);
  };

  /**
   * set key content
   * @param {} key     []
   * @param {} content []
   */

  _default.prototype.set = function set(key, content) {
    this.data[key] = content;
    return _Promise.resolve();
  };

  /**
   * delete key
   * @param  {String} key []
   * @return {}     []
   */

  _default.prototype['delete'] = function _delete(key) {
    delete this.data[key];
    return _Promise.resolve();
  };

  /**
   * get all data
   * @return {} []
   */

  _default.prototype.list = function list() {
    return _Promise.resolve(this.data);
  };

  return _default;
})(think.adapter.base);

exports['default'] = _default;
module.exports = exports['default'];