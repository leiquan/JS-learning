'use strict';

var _inherits = require('babel-runtime/helpers/inherits')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _Object$keys = require('babel-runtime/core-js/object/keys')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

exports.__esModule = true;

var _baseJs = require('./base.js');

var _baseJs2 = _interopRequireDefault(_baseJs);

/**
 * websocket adapter for socket.io
 */

var _default = (function (_Base) {
  _inherits(_default, _Base);

  function _default() {
    _classCallCheck(this, _default);

    _Base.apply(this, arguments);
  }

  /**
   * run
   * @return {} []
   */

  _default.prototype.run = function run() {
    var socketio, io, allow_origin, messages, msgKeys, open, close;
    return _regeneratorRuntime.async(function run$(context$2$0) {
      var _this = this;

      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.next = 2;
          return _regeneratorRuntime.awrap(think.npm('socket.io'));

        case 2:
          socketio = context$2$0.sent;
          io = socketio(this.server);

          this.io = io;

          //set io adapter, must be a function
          //http://socket.io/docs/using-multiple-nodes/
          if (this.config.adapter) {
            io.adapter(this.config.adapter());
          }

          //Sets the path v under which engine.io and the static files will be served. Defaults to /socket.io.
          if (this.config.path) {
            io.path(this.config.path);
          }

          //Sets the allowed origins v. Defaults to any origins being allowed.
          allow_origin = this.config.allow_origin;

          if (allow_origin) {
            io.origins(this.config.allow_origin);
          }

          //get message type
          messages = think.extend({}, this.config.messages);
          msgKeys = _Object$keys(messages);
          open = messages.open;

          delete messages.open;
          close = messages.close;

          delete messages.close;

          thinkCache(thinkCache.WEBSOCKET, io.sockets.sockets);

          io.on('connection', function (socket) {

            //open connection
            if (open) {
              _this.message(open, undefined, socket);
            }
            //listen disonnection event
            if (close) {
              socket.on('disconnect', function () {
                _this.message(close, undefined, socket);
              });
            }

            //listen list of message type
            msgKeys.forEach(function (msgKey) {
              socket.on(msgKey, function (msg) {
                _this.message(messages[msgKey], msg, socket);
              });
            });
          });

        case 17:
        case 'end':
          return context$2$0.stop();
      }
    }, null, this);
  };

  /**
   * emit socket data
   * @param  {String} event []
   * @param  {Mixed} data  []
   * @return {}       []
   */

  _default.prototype.emit = function emit(event, data) {
    return this.socket.emit(event, data);
  };

  /**
   * broadcast socket data
   * @param  {String} event       []
   * @param  {Mixed} data        []
   * @param  {Boolean} containSelf []
   * @return {}             []
   */

  _default.prototype.broadcast = function broadcast(event, data, containSelf) {
    if (containSelf) {
      this.io.sockets.emit(event, data);
    } else {
      this.socket.broadcast.emit(event, data);
    }
  };

  /**
   * deal message
   * @param  {String} url  []
   * @param  {Mixed} data []
   * @return {}      []
   */

  _default.prototype.message = function message(url, data, socket) {
    var request, http, instance;
    return _regeneratorRuntime.async(function message$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          request = socket.request;

          if (url[0] !== '/') {
            url = '/' + url;
          }
          request.url = url;

          context$2$0.next = 5;
          return _regeneratorRuntime.awrap(think.http(request, think.extend({}, request.res)));

        case 5:
          http = context$2$0.sent;

          http.data = data;
          http.socket = socket;
          http.io = this.io;

          http.socketEmit = this.emit;
          http.socketBroadcast = this.broadcast;

          instance = new this.app(http);
          return context$2$0.abrupt('return', instance.run());

        case 13:
        case 'end':
          return context$2$0.stop();
      }
    }, null, this);
  };

  return _default;
})(_baseJs2['default']);

exports['default'] = _default;
module.exports = exports['default'];