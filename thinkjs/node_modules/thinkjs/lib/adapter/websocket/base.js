'use strict';

var _inherits = require('babel-runtime/helpers/inherits')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

exports.__esModule = true;

var _url = require('url');

var _url2 = _interopRequireDefault(_url);

var _default = (function (_think$adapter$base) {
  _inherits(_default, _think$adapter$base);

  function _default() {
    _classCallCheck(this, _default);

    _think$adapter$base.apply(this, arguments);
  }

  /**
   * init
   * @param  {Object} server []
   * @param  {Object} config []
   * @return {Object}        []
   */

  _default.prototype.init = function init(server, config, app) {
    this.server = server;
    this.config = config;
    this.app = app;
  };

  /**
   * check origin allowed
   * @param  {String}  origin []
   * @return {Boolean}        []
   */

  _default.prototype.isOriginAllowed = function isOriginAllowed(origin) {
    var allowOrigins = this.config.allow_origin;
    if (!allowOrigins) {
      return true;
    }
    var info = _url2['default'].parse(origin);
    var hostname = info.hostname;
    if (think.isString(allowOrigins)) {
      return allowOrigins === hostname;
    } else if (think.isArray(allowOrigins)) {
      return allowOrigins.indexOf(hostname) > -1;
    } else if (think.isFunction(allowOrigins)) {
      return allowOrigins(hostname, info);
    }
    return false;
  };

  /**
   * run
   * @return {} []
   */

  _default.prototype.run = function run() {};

  return _default;
})(think.adapter.base);

exports['default'] = _default;
module.exports = exports['default'];