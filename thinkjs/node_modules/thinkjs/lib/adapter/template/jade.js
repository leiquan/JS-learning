'use strict';

var _inherits = require('babel-runtime/helpers/inherits')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

exports.__esModule = true;

var _baseJs = require('./base.js');

var _baseJs2 = _interopRequireDefault(_baseJs);

/**
 * jade template
 * @type {Class}
 */

var _default = (function (_Base) {
  _inherits(_default, _Base);

  function _default() {
    _classCallCheck(this, _default);

    _Base.apply(this, arguments);
  }

  /**
   * run
   * @param  {String} templateFile []
   * @param  {Object} tVar         []
   * @return {Promise}             []
   */

  _default.prototype.run = function run(templateFile, tVar, config) {
    var options, jade, _compile, content, compile;

    return _regeneratorRuntime.async(function run$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          options = this.parseConfig({
            filename: templateFile
          }, config);
          context$2$0.next = 3;
          return _regeneratorRuntime.awrap(think.npm('jade'));

        case 3:
          jade = context$2$0.sent;

          this.prerender(options, jade);

          if (!options.cache_compile) {
            context$2$0.next = 9;
            break;
          }

          _compile = thinkCache(thinkCache.VIEW_CONTENT, templateFile + '-compile');

          if (!_compile) {
            context$2$0.next = 9;
            break;
          }

          return context$2$0.abrupt('return', _compile(tVar));

        case 9:
          context$2$0.next = 11;
          return _regeneratorRuntime.awrap(this.getContent(templateFile));

        case 11:
          content = context$2$0.sent;
          compile = jade.compile(content, options);

          if (options.cache_compile) {
            thinkCache(thinkCache.VIEW_CONTENT, templateFile + '-compile', compile);
          }

          return context$2$0.abrupt('return', compile(tVar));

        case 15:
        case 'end':
          return context$2$0.stop();
      }
    }, null, this);
  };

  return _default;
})(_baseJs2['default']);

exports['default'] = _default;
module.exports = exports['default'];