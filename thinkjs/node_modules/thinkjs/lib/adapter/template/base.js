'use strict';

var _inherits = require('babel-runtime/helpers/inherits')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

exports.__esModule = true;

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

/**
 * template base class
 * @type {Class}
 */

var _default = (function (_think$adapter$base) {
  _inherits(_default, _think$adapter$base);

  function _default() {
    _classCallCheck(this, _default);

    _think$adapter$base.apply(this, arguments);
  }

  /**
   * merge config
   * @param  {Object} defaultConf []
   * @param  {Object} extraConf   []
   * @return {}             []
   */

  _default.prototype.parseConfig = function parseConfig(defaultConf, extraConf) {
    var config = think.parseConfig(defaultConf, think.config('view'), extraConf);
    //compatibility with view.options
    if (!think.isEmpty(config.options)) {
      think.log(function (colors) {
        return colors.yellow('[DEPRECATED]') + (' view.options is deprecated, use view.adapter.' + config.type + ' instead');
      });
      config = think.extend(config, config.options);
    }
    return config;
  };

  /**
   * pre render
   * @param  {Object}    config []
   * @param  {...[type]} args   []
   * @return {}           []
   */

  _default.prototype.prerender = function prerender() {
    var config = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

    if (think.isFunction(config.prerender)) {
      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }

      config.prerender.apply(config, args);
    }
  };

  /**
   * get template file content
   * @return {} []
   */

  _default.prototype.getContent = function getContent(file) {
    var mTime = _fs2['default'].statSync(file).mtime.getTime();
    var fileCache = thinkCache(thinkCache.VIEW_CONTENT, file);
    if (fileCache && fileCache[0] >= mTime) {
      return fileCache[1];
    }
    var content = _fs2['default'].readFileSync(file, 'utf8');
    thinkCache(thinkCache.VIEW_CONTENT, file, [mTime, content]);
    return content;
    // let fn = think.promisify(fs.readFile, fs);
    // return fn(file, 'utf8');
  };

  /**
   * run
   * @param  {String} templateFile []
   * @param  {Object} tVar         []
   * @return {promise}             []
   */

  _default.prototype.run = function run(templateFile) {
    return this.getContent(templateFile);
  };

  return _default;
})(think.adapter.base);

exports['default'] = _default;
module.exports = exports['default'];