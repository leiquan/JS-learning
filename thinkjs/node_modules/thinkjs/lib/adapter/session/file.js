'use strict';

var _inherits = require('babel-runtime/helpers/inherits')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

exports.__esModule = true;

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _os = require('os');

var _os2 = _interopRequireDefault(_os);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

/**
 * file store
 * @type {Class}
 */
var FileStore = think.adapter('store', 'file');

/**
 * file session
 */

var _default = (function (_think$adapter$base) {
  _inherits(_default, _think$adapter$base);

  function _default() {
    _classCallCheck(this, _default);

    _think$adapter$base.apply(this, arguments);
  }

  /**
   * init
   * @param  {Object} options []
   * @return {}         []
   */

  _default.prototype.init = function init(options) {

    options = think.parseConfig(options);

    this.timeout = options.timeout;
    this.cookie = options.cookie;
    this.path = options.path || _path2['default'].normalize(_os2['default'].tmpdir() + '/thinkjs');
    this.path_depth = options.path_depth || 1;

    this.store = new FileStore({
      path: this.path
    });

    this.gcType = this.path;
    think.gc(this);
  };

  /**
   * get stored file path
   * @return {String} []
   */

  _default.prototype.getFilepath = function getFilepath() {
    var name = this.cookie;
    var dir = name.slice(0, this.path_depth).split('').join('/');
    return dir + '/' + name + '.json';
  };

  /**
   * get session data
   * @return {Promise} []
   */

  _default.prototype.getData = function getData() {
    var filepath, data;
    return _regeneratorRuntime.async(function getData$(context$2$0) {
      var _this = this;

      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          if (!this.data) {
            context$2$0.next = 2;
            break;
          }

          return context$2$0.abrupt('return', this.data);

        case 2:
          filepath = this.getFilepath();
          context$2$0.next = 5;
          return _regeneratorRuntime.awrap(think.await('session_' + this.cookie, function () {
            return _this.store.get(filepath)['catch'](function () {});
          }));

        case 5:
          data = context$2$0.sent;

          if (!this.data) {
            context$2$0.next = 8;
            break;
          }

          return context$2$0.abrupt('return', this.data);

        case 8:

          this.data = {};

          if (data) {
            context$2$0.next = 11;
            break;
          }

          return context$2$0.abrupt('return', this.data);

        case 11:
          context$2$0.prev = 11;

          data = JSON.parse(data);
          context$2$0.next = 18;
          break;

        case 15:
          context$2$0.prev = 15;
          context$2$0.t0 = context$2$0['catch'](11);
          return context$2$0.abrupt('return', this.data);

        case 18:
          if (!(Date.now() > data.expire)) {
            context$2$0.next = 23;
            break;
          }

          context$2$0.next = 21;
          return _regeneratorRuntime.awrap(this.store['delete'](filepath));

        case 21:
          context$2$0.next = 24;
          break;

        case 23:
          this.data = data.data || {};

        case 24:
          return context$2$0.abrupt('return', this.data);

        case 25:
        case 'end':
          return context$2$0.stop();
      }
    }, null, this, [[11, 15]]);
  };

  /**
   * get data
   * @param  {String} name []
   * @return {Promise}      []
   */

  _default.prototype.get = function get(name) {
    var _this2 = this;

    return this.getData().then(function () {
      return name ? _this2.data[name] : _this2.data;
    });
  };

  /**
   * set data
   * @param {String} name    []
   * @param {Mixed} value   []
   * @param {Number} timeout []
   */

  _default.prototype.set = function set(name, value) {
    var _this3 = this;

    var timeout = arguments.length <= 2 || arguments[2] === undefined ? this.timeout : arguments[2];

    this.timeout = timeout;
    return this.getData().then(function () {
      _this3.data[name] = value;
    });
  };

  /**
   * delete data
   * @param  {String} name []
   * @return {Promise}      []
   */

  _default.prototype['delete'] = function _delete(name) {
    var _this4 = this;

    return this.getData().then(function () {
      if (name) {
        delete _this4.data[name];
      } else {
        _this4.data = {};
      }
    });
  };

  /**
   * flush data to file
   * @return {Promise} []
   */

  _default.prototype.flush = function flush() {
    var _this5 = this;

    var filepath = this.getFilepath();
    return this.getData().then(function () {
      var data = {
        data: _this5.data,
        expire: Date.now() + _this5.timeout * 1000,
        timeout: _this5.timeout
      };
      return _this5.store.set(filepath, JSON.stringify(data));
    });
  };

  /**
   * gc
   * @return {} []
   */

  _default.prototype.gc = function gc() {
    var _this6 = this;

    var now = Date.now();
    return this.store.list().then(function (files) {
      files.forEach(function (file) {
        var filepath = _this6.path + '/' + file;
        var content = _fs2['default'].readFileSync(filepath, 'utf8');
        try {
          var data = JSON.parse(content);
          if (now > data.expire) {
            _fs2['default'].unlink(filepath, function () {});
          }
        } catch (e) {
          _fs2['default'].unlink(filepath, function () {});
        }
      });
    });
  };

  return _default;
})(think.adapter.base);

exports['default'] = _default;
module.exports = exports['default'];

//ignore error

//when data is set, return