'use strict';

var _inherits = require('babel-runtime/helpers/inherits')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

exports.__esModule = true;
var RedisSocket = think.adapter('socket', 'redis');

/**
 * redis session
 */

var _default = (function (_think$adapter$base) {
  _inherits(_default, _think$adapter$base);

  function _default() {
    _classCallCheck(this, _default);

    _think$adapter$base.apply(this, arguments);
  }

  /**
   * init
   * @param  {Object} options []
   * @return {}         []
   */

  _default.prototype.init = function init(options) {

    this.options = think.extend({}, think.config('session'), options);

    this.timeout = this.options.timeout;
    this.cookie = this.options.cookie;
  };

  /**
   * get redis instance
   * @return {Object} []
   */

  _default.prototype.getRedisInstance = function getRedisInstance(name) {
    var options = this.parseConfig(think.config('redis'), this.options, {
      command: name,
      from: 'session'
    });
    this.timeout = options.timeout || this.timeout;
    return RedisSocket.getInstance(options, thinkCache.REDIS, ['command', 'from']);
  };

  /**
   * get session
   * @return {Promise} []
   */

  _default.prototype.getData = function getData() {
    var instance, data;
    return _regeneratorRuntime.async(function getData$(context$2$0) {
      var _this = this;

      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          if (!this.data) {
            context$2$0.next = 2;
            break;
          }

          return context$2$0.abrupt('return', this.data);

        case 2:
          instance = this.getRedisInstance('get');
          context$2$0.next = 5;
          return _regeneratorRuntime.awrap(think.await('session_' + this.cookie, function () {
            return instance.get(_this.cookie);
          }));

        case 5:
          data = context$2$0.sent;

          if (!this.data) {
            context$2$0.next = 8;
            break;
          }

          return context$2$0.abrupt('return', this.data);

        case 8:

          this.data = {};
          try {
            this.data = JSON.parse(data) || {};
          } catch (e) {}

          return context$2$0.abrupt('return', this.data);

        case 11:
        case 'end':
          return context$2$0.stop();
      }
    }, null, this);
  };

  /**
   * get data
   * @param  {String} name []
   * @return {Promise}      []
   */

  _default.prototype.get = function get(name) {
    var _this2 = this;

    return this.getData().then(function () {
      return !name ? _this2.data : _this2.data[name];
    });
  };

  /**
   * set data
   * @param {String} name    []
   * @param {Mixed} value   []
   * @param {Number} timeout []
   */

  _default.prototype.set = function set(name, value, timeout) {
    var _this3 = this;

    if (timeout) {
      this.timeout = timeout;
    }
    return this.getData().then(function () {
      _this3.data[name] = value;
    });
  };

  /**
   * delete data
   * @param  {String} name []
   * @return {Promise}      []
   */

  _default.prototype['delete'] = function _delete(name) {
    var _this4 = this;

    return this.getData().then(function () {
      if (name) {
        delete _this4.data[name];
      } else {
        _this4.data = {};
      }
    });
  };

  /**
   * flush data
   * @return {Promise} []
   */

  _default.prototype.flush = function flush() {
    var _this5 = this;

    return this.getData().then(function () {
      var instance = _this5.getRedisInstance('set');
      return instance.set(_this5.cookie, JSON.stringify(_this5.data), _this5.timeout);
    });
  };

  return _default;
})(think.adapter.base);

exports['default'] = _default;
module.exports = exports['default'];