'use strict';

var _inherits = require('babel-runtime/helpers/inherits')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _Promise = require('babel-runtime/core-js/promise')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

exports.__esModule = true;

var _querystring = require('querystring');

var _querystring2 = _interopRequireDefault(_querystring);

var _baseJs = require('./base.js');

var _baseJs2 = _interopRequireDefault(_baseJs);

/**
 * mongodb socket
 */

var _default = (function (_Base) {
  _inherits(_default, _Base);

  function _default() {
    _classCallCheck(this, _default);

    _Base.apply(this, arguments);
  }

  /**
   * init
   * @param  {Object} config []
   * @return {}        []
   */

  _default.prototype.init = function init(config) {
    _Base.prototype.init.call(this, config);

    this.config = think.extend({}, {
      host: '127.0.0.1'
    }, config);
    this.config.port = this.config.port || 27017;
  };

  /**
   * get connection
   * @return {Promise} []
   */

  _default.prototype.getConnection = function getConnection() {
    var mongo, config, auth, options, str;
    return _regeneratorRuntime.async(function getConnection$(context$2$0) {
      var _this = this;

      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          if (!this.connection) {
            context$2$0.next = 2;
            break;
          }

          return context$2$0.abrupt('return', this.connection);

        case 2:
          context$2$0.next = 4;
          return _regeneratorRuntime.awrap(think.npm('mongodb'));

        case 4:
          mongo = context$2$0.sent;
          config = this.config;
          auth = '';

          this.mongo = mongo;
          if (this.config.user) {
            auth = config.user + ':' + config.pwd + '@';
          }
          // connection options
          // http://mongodb.github.io/node-mongodb-native/2.0/tutorials/urls/
          options = '';

          if (config.options) {
            options = '?' + _querystring2['default'].stringify(config.options);
          }
          str = 'mongodb://' + auth + config.host + ':' + config.port + '/' + config.name + options;
          return context$2$0.abrupt('return', think.await(str, function () {
            var fn = think.promisify(mongo.MongoClient.connect, mongo.MongoClient);
            var promise = fn(str, _this.config).then(function (connection) {
              _this.logConnect(str, 'mongodb');
              //set logger level
              if (config.log_level) {
                mongo.Logger.setLevel(config.log_level);
              }
              _this.connection = connection;
              return connection;
            })['catch'](function (err) {
              _this.logConnect(str, 'mongodb');
              return _Promise.reject(err);
            });
            var err = new Error(str);
            return think.error(promise, err);
          }));

        case 13:
        case 'end':
          return context$2$0.stop();
      }
    }, null, this);
  };

  return _default;
})(_baseJs2['default']);

exports['default'] = _default;
module.exports = exports['default'];