'use strict';

var _inherits = require('babel-runtime/helpers/inherits')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _Object$keys = require('babel-runtime/core-js/object/keys')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

exports.__esModule = true;

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

/**
 * file store
 * @type {Class}
 */
var FileStore = think.adapter('store', 'file');

/**
 * file cache
 */

var _default = (function (_think$adapter$base) {
  _inherits(_default, _think$adapter$base);

  function _default() {
    _classCallCheck(this, _default);

    _think$adapter$base.apply(this, arguments);
  }

  /**
   * init
   * @param  {Object} options []
   * @return {}         []
   */

  _default.prototype.init = function init(options) {

    options = think.parseConfig(think.config('cache'), options);

    this.timeout = options.timeout;
    this.file_ext = options.file_ext;
    this.path = options.path;
    this.path_depth = options.path_depth || 1;

    this.store = new FileStore({
      path: this.path
    });

    this.gcType = this.path;
    think.gc(this);
  };

  /**
   * get stored file path
   * @return {String} []
   */

  _default.prototype.getFilepath = function getFilepath(name) {
    name = think.md5(name);
    var dir = name.slice(0, this.path_depth).split('').join('/');
    return dir + '/' + name + this.file_ext;
  };

  /**
   * get data
   * @param  {String} name []
   * @return {Promise}      []
   */

  _default.prototype.get = function get(name) {
    var _this = this;

    var filepath = this.getFilepath(name);
    return this.store.get(filepath).then(function (data) {
      if (!data) {
        return;
      }
      try {
        data = JSON.parse(data);
        if (data.expire && Date.now() > data.expire) {
          return _this.store['delete'](filepath);
        } else {
          return data.data;
        }
      } catch (e) {
        return _this.store['delete'](filepath);
      }
    })['catch'](function () {});
  };

  /**
   * set data
   * @param {String} name    []
   * @param {Mixed} value   []
   * @param {Number} timeout []
   */

  _default.prototype.set = function set(name, value) {
    var timeout = arguments.length <= 2 || arguments[2] === undefined ? this.timeout : arguments[2];

    if (think.isObject(name)) {
      timeout = value || timeout;
      var key = _Object$keys(name)[0];
      value = name[key];
      name = key;
    }
    var filepath = this.getFilepath(name);
    var data = {
      data: value,
      expire: Date.now() + timeout * 1000,
      timeout: timeout
    };
    return this.store.set(filepath, JSON.stringify(data))['catch'](function () {});
  };

  /**
   * delete data
   * @param  {String} name []
   * @return {Promise}      []
   */

  _default.prototype['delete'] = function _delete(name) {
    var filepath = this.getFilepath(name);
    return this.store['delete'](filepath)['catch'](function () {});
  };

  /**
   * gc
   * @return {} []
   */

  _default.prototype.gc = function gc() {
    var _this2 = this;

    var now = Date.now();
    return this.store.list().then(function (files) {
      files.forEach(function (file) {
        var filepath = _this2.path + '/' + file;
        var content = _fs2['default'].readFileSync(filepath, 'utf8');
        try {
          var data = JSON.parse(content);
          if (now > data.expire) {
            _fs2['default'].unlink(filepath, function () {});
          }
        } catch (e) {
          _fs2['default'].unlink(filepath, function () {});
        }
      });
    });
  };

  return _default;
})(think.adapter.base);

exports['default'] = _default;
module.exports = exports['default'];