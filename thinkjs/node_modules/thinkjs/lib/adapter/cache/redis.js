'use strict';

var _inherits = require('babel-runtime/helpers/inherits')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _Object$keys = require('babel-runtime/core-js/object/keys')['default'];

exports.__esModule = true;
var RedisSocket = think.adapter('socket', 'redis');

/**
 * redis cache
 */

var _default = (function (_think$adapter$base) {
  _inherits(_default, _think$adapter$base);

  function _default() {
    _classCallCheck(this, _default);

    _think$adapter$base.apply(this, arguments);
  }

  /**
   * init
   * @param  {Object} options []
   * @return {}         []
   */

  _default.prototype.init = function init(options) {
    this.options = think.parseConfig(think.config('cache'), options);
    this.timeout = this.options.timeout || 0;
    this.prefix = this.options.prefix || '';
  };

  /**
   * get redis instance
   * @return {Object} []
   */

  _default.prototype.getRedisInstance = function getRedisInstance(name) {
    var options = this.parseConfig(think.config('redis'), this.options, {
      command: name,
      from: 'cache'
    });
    this.timeout = options.timeout || this.timeout;
    this.prefix = options.prefix || this.prefix;
    return RedisSocket.getInstance(options, thinkCache.REDIS, ['command', 'from']);
  };

  /**
   * get data
   * @param  {String} name []
   * @return {Promise}      []
   */

  _default.prototype.get = function get(name) {
    var instance = this.getRedisInstance('get');
    return instance.get(this.prefix + name).then(function (value) {
      if (value) {
        return JSON.parse(value);
      }
    })['catch'](function () {});
  };

  /**
   * set data
   * @param {String} name    []
   * @param {Mixed} value   []
   * @param {Number} timeout []
   */

  _default.prototype.set = function set(name, value) {
    var timeout = arguments.length <= 2 || arguments[2] === undefined ? this.timeout : arguments[2];

    if (think.isObject(name)) {
      timeout = value || timeout;
      var key = _Object$keys(name)[0];
      value = name[key];
      name = key;
    }
    var instance = this.getRedisInstance('set');
    return instance.set(this.prefix + name, JSON.stringify(value), timeout)['catch'](function () {});
  };

  /**
   * delete data
   * @param  {String} name []
   * @return {Promise}      []
   */

  _default.prototype['delete'] = function _delete(name) {
    var instance = this.getRedisInstance('delete');
    return instance['delete'](this.prefix + name)['catch'](function () {});
  };

  /**
   * wrap
   * @param  {[type]}    name []
   * @param  {...[type]} data []
   * @return {[type]}         []
   */
  // wrap(command, name, ...data){
  //   let instance = this.getRedisInstance(command);
  //   return instance.wrap(command, this.prefix + name, ...data);
  // }
  return _default;
})(think.adapter.base);

exports['default'] = _default;
module.exports = exports['default'];