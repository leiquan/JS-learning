'use strict';
/**
 * base store
 * @type {Class}
 */

var _inherits = require('babel-runtime/helpers/inherits')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

exports.__esModule = true;
var BaseStore = think.adapter('store', 'memory');
/**
 * memory cache
 */

var _default = (function (_think$adapter$base) {
  _inherits(_default, _think$adapter$base);

  function _default() {
    _classCallCheck(this, _default);

    _think$adapter$base.apply(this, arguments);
  }

  /**
   * init
   * @param  {Object} options []
   * @return {}         []
   */

  _default.prototype.init = function init(options) {

    options = think.parseConfig(options);

    this.timeout = options.timeout;

    this.store = new BaseStore({
      type: thinkCache.MEMORY
    });

    //set gc type & start gc
    this.gcType = 'cache_memory';
    think.gc(this);
  };

  /**
   * get session data
   * @param  {String} name []
   * @return {Promise}      []
   */

  _default.prototype.get = function get(name) {
    var _this = this;

    return this.store.get(name).then(function (data) {
      if (!data) {
        return;
      }
      //data is expire
      if (data.expire && Date.now() > data.expire) {
        return _this.store['delete'](name);
      }
      return think.clone(data.data);
    });
  };

  /**
   * set session data
   * @param {String} name    []
   * @param {Mixed} value   []
   * @param {Number} timeout []
   * @return {Promise} []
   */

  _default.prototype.set = function set(name, value) {
    var timeout = arguments.length <= 2 || arguments[2] === undefined ? this.timeout : arguments[2];

    value = think.clone(value);
    var data = {
      expire: timeout > 0 ? Date.now() + timeout * 1000 : null,
      timeout: timeout,
      data: value
    };
    return this.store.set(name, data);
  };

  /**
   * delete session data
   * @param  {String} name []
   * @return {Promise}      []
   */

  _default.prototype['delete'] = function _delete(name) {
    return this.store['delete'](name);
  };

  /**
   * gc
   * is internal method
   * @return {} []
   */

  _default.prototype.gc = function gc() {
    var now = Date.now();
    return this.store.list().then(function (list) {
      for (var key in list) {
        var item = list[key];
        if (item && item.expire && now > item.expire) {
          delete list[key];
        }
      }
    });
  };

  return _default;
})(think.adapter.base);

exports['default'] = _default;
module.exports = exports['default'];