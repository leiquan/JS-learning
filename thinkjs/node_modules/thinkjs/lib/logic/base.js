'use strict';

/**
 * base logic
 * inherits from base controller
 * @type {Class}
 */

var _inherits = require('babel-runtime/helpers/inherits')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

exports.__esModule = true;

var _default = (function (_think$controller$base) {
  _inherits(_default, _think$controller$base);

  function _default() {
    _classCallCheck(this, _default);

    _think$controller$base.apply(this, arguments);
  }

  /**
   * check auth
   * @return {Promise} []
   */
  // checkAuth(){

  // }
  /**
   * parse validate data
   * {
   *   name: 'required|int|min:10|max:20',
   *   title: 'length:10,20|default:welefen|get',
   *   emai: 'required|email:{}',
   *   ids: 'required|array|int'
   * }
   * @param  {Array}  data []
   * @return {Array}      []
   */

  _default.prototype._parseValidateData = function _parseValidateData() {
    var _this = this;

    var data = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

    var result = {};

    var _loop = function (_name) {
      var itemData = {};

      if (think.isString(data[_name])) {
        var rules = data[_name].split('|');
        rules.forEach(function (item) {
          item = item.trim();
          if (!item) {
            return;
          }
          var pos = item.indexOf(':');
          if (pos > -1) {
            var _name2 = item.substr(0, pos);
            var args = item.substr(pos + 1).trim();
            if (args[0] === '{' || args[0] === '[') {
              args = [new Function('', 'return ' + args)()];
            } else if (_name2 !== 'default') {
              args = args.split(/\s*,\s*/);
            }
            itemData[_name2] = args;
          } else {
            itemData[item] = true;
          }
        });
      } else {
        itemData = data[_name];
      }

      var method = _this.http.method.toLowerCase();
      if (itemData.get) {
        method = 'get';
        delete itemData.get;
      } else if (itemData.file) {
        method = 'file';
        delete itemData.file;
      }
      var value = _this[method](_name);

      if (!value && itemData['default']) {
        value = itemData['default'];
      }
      delete itemData['default'];

      if (itemData.int && !itemData.array) {
        value = parseInt(value, 10);
      } else if (itemData.float && !itemData.array) {
        value = parseFloat(value);
      } else if (itemData.array) {
        if (!think.isArray(value)) {
          value = think.isString(value) ? value.split(/\s*,\s*/) : [value];
        }
        value = value.map(function (itemValue) {
          if (itemData.int) {
            return parseInt(itemValue, 10);
          } else if (itemData.float) {
            return parseFloat(itemValue);
          }
          return itemValue;
        });
      } else if (itemData.boolean) {
        if (!think.isBoolean(value)) {
          value = ['yes', 'on', '1', 'true'].indexOf(value) > -1;
        }
      } else if (itemData.object) {
        if (!think.isObject(value)) {
          try {
            value = JSON.parse(value);
          } catch (e) {
            value = '';
          }
        }
      } else {
        itemData.string = true;
      }
      //set value to request
      _this[method](_name, value);
      itemData.value = value;
      result[_name] = itemData;
    };

    for (var _name in data) {
      _loop(_name);
    }
    return result;
  };

  /**
   * validate data
   * this.validate({
   *   welefen: 'required|length:4,20|alpha',
   *   email: 'required|email',
   *   title: 'required|maxLength:10000'
   * })
   * @param  {Object} data      []
   * @return {}           []
   */

  _default.prototype.validate = function validate(data) {
    this._validateInvoked = true;
    if (think.isEmpty(data)) {
      return true;
    }
    data = this._parseValidateData(data);
    var ret = think.validate(data, this.locale());
    if (!think.isEmpty(ret)) {
      this.assign('errors', ret);
      return false;
    }
    return true;
  };

  /**
   * get validate errors
   * @return {Object} []
   */

  _default.prototype.errors = function errors() {
    return this.assign('errors');
  };

  /**
   * auto validate
   * @return {} []
   */

  _default.prototype.__after = function __after() {
    if (think.isEmpty(this.rules) || this._validateInvoked) {
      return;
    }
    var flag = this.validate(this.rules);
    if (!flag) {
      var error = this.config('error');
      return this.fail(error.validate_errno, this.errors());
    }
  };

  return _default;
})(think.controller.base);

exports['default'] = _default;
module.exports = exports['default'];