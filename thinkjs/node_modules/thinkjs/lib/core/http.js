'use strict';

var _inherits = require('babel-runtime/helpers/inherits')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _Promise = require('babel-runtime/core-js/promise')['default'];

var _Object$values = require('babel-runtime/core-js/object/values')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

exports.__esModule = true;

var _url = require('url');

var _url2 = _interopRequireDefault(_url);

var _events = require('events');

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _mime = require('mime');

var _mime2 = _interopRequireDefault(_mime);

var _util = require('util');

var _util2 = _interopRequireDefault(_util);

var _cookie = think.require('cookie');

/**
 * wrap for request & response
 * @type {Object}
 */

var _default = (function (_think$base) {
  _inherits(_default, _think$base);

  function _default() {
    _classCallCheck(this, _default);

    _think$base.apply(this, arguments);
  }

  /**
   * init method
   * @param  {Object} req [request]
   * @param  {Object} res [response]
   * @return {}     []
   */

  _default.prototype.init = function init(req, res) {
    var _this = this;

    //request object
    this.req = req;
    //response object
    this.res = res;
    //instance of EventEmitter
    this.http = new _events.EventEmitter();

    this.http.req = req;
    this.http.res = res;
    //set http start time
    this.http.startTime = Date.now();

    //set request timeout
    var timeout = think.config('timeout');
    if (timeout) {
      res.setTimeout(timeout * 1000, function () {
        _this.http.emit('timeout');
        _this.http.end();
      });
    }
  };

  /**
   * exec
   * @return Promise            []
   */

  _default.prototype.run = function run() {
    var methods;
    return _regeneratorRuntime.async(function run$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          this.bind();

          context$2$0.next = 3;
          return _regeneratorRuntime.awrap(think.hook('request_begin', this.http));

        case 3:
          methods = ['POST', 'PUT', 'PATCH'];

          if (!(methods.indexOf(this.req.method) > -1)) {
            context$2$0.next = 7;
            break;
          }

          context$2$0.next = 7;
          return _regeneratorRuntime.awrap(this.parsePayload());

        case 7:
          return context$2$0.abrupt('return', this.http);

        case 8:
        case 'end':
          return context$2$0.stop();
      }
    }, null, this);
  };

  /**
   * check request has post data
   * @return {Boolean} []
   */

  _default.prototype.hasPayload = function hasPayload() {
    if ('transfer-encoding' in this.req.headers) {
      return true;
    }
    return (this.req.headers['content-length'] | 0) > 0;
  };

  /**
   * get payload data
   * @return {Promise} []
   */

  _default.prototype.getPayload = function getPayload() {
    var _this2 = this;

    if (think.isString(this.payload)) {
      return _Promise.resolve(this.payload);
    }

    //payload data has readed by third middleware
    if (!this.req.readable) {
      return _Promise.resolve('');
    }

    var buffers = [];
    var deferred = think.defer();
    this.req.on('data', function (chunk) {
      buffers.push(chunk);
    });
    this.req.on('end', function () {
      _this2.payload = Buffer.concat(buffers).toString();
      deferred.resolve(_this2.payload);
    });
    this.req.on('error', function () {
      _this2.res.statusCode = 400;
      _this2.end();
    });
    return deferred.promise;
  };

  /**
   * parse payload from request
   * @return {Promise} []
   */

  _default.prototype.parsePayload = function parsePayload() {
    return _regeneratorRuntime.async(function parsePayload$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          if (!this.hasPayload()) {
            context$2$0.next = 5;
            break;
          }

          context$2$0.next = 3;
          return _regeneratorRuntime.awrap(think.hook('payload_parse', this.http));

        case 3:
          context$2$0.next = 5;
          return _regeneratorRuntime.awrap(think.hook('payload_validate', this.http));

        case 5:
        case 'end':
          return context$2$0.stop();
      }
    }, null, this);
  };

  /**
   * bind props & methods to http
   * @return {} []
   */

  _default.prototype.bind = function bind() {
    var http = this.http;
    http.url = this.req.url;
    http.version = this.req.httpVersion;
    http.method = this.req.method;
    http.headers = this.req.headers;

    var urlInfo = _url2['default'].parse('//' + http.headers.host + this.req.url, true, true);
    var pathname = decodeURIComponent(urlInfo.pathname);
    http.pathname = this.normalizePathname(pathname);
    http.query = urlInfo.query;
    http.host = urlInfo.host;
    http.hostname = urlInfo.hostname;

    http._file = {};
    http._post = {};
    http._cookie = _cookie.parse(http.headers.cookie);
    http._sendCookie = {};
    http._get = think.extend({}, urlInfo.query);
    http._type = (http.headers['content-type'] || '').split(';')[0].trim();
    http._contentTypeIsSend = false;

    http.getPayload = this.getPayload;
    http.config = this.config;
    http.referrer = this.referrer;
    http.userAgent = this.userAgent;
    http.isGet = this.isGet;
    http.isPost = this.isPost;
    http.isAjax = this.isAjax;
    http.isJsonp = this.isJsonp;
    http.get = this.get;
    http.post = this.post;
    http.param = this.param;
    http.file = this.file;
    http.header = this.header;
    http.status = this.status;
    http.ip = this.ip;
    http.lang = this.lang;
    http.theme = this.theme;
    http.cookie = this.cookie;
    http.redirect = this.redirect;
    http.write = this.write;
    http.end = this.end;
    http._end = this._end;
    http.sendTime = this.sendTime;
    http.type = this.type;
    http.success = this.success;
    http.fail = this.fail;
    http.jsonp = this.jsonp;
    http.json = this.json;
    http.view = this.view;
    http.expires = this.expires;
    http.locale = this.locale;
    http.session = this.session;
  };

  /**
   * normalize pathname, remove hack chars
   * @param  {String} pathname []
   * @return {String}          []
   */

  _default.prototype.normalizePathname = function normalizePathname(pathname) {
    var length = pathname.length;
    var i = 0,
        chr = undefined,
        result = [],
        value = '';
    while (i < length) {
      chr = pathname[i++];
      if (chr === '/' || chr === '\\') {
        if (value && value[0] !== '.') {
          result.push(value);
        }
        value = '';
      } else {
        value += chr;
      }
    }
    if (value && value[0] !== '.') {
      result.push(value);
    }
    return result.join('/');
  };

  /*
   * get or set config
   * @param  {string} name  [config name]
   * @param  {mixed} value [config value]
   * @return {mixed}       []
   */

  _default.prototype.config = function config(name, value) {
    return think.config(name, value, this._config);
  };

  /**
   * get or set content type
   * @param  {String} ext [file ext]
   * @return {}     []
   */

  _default.prototype.type = function type(contentType, encoding) {
    if (!contentType) {
      return this._type;
    }
    if (this._contentTypeIsSend) {
      return;
    }
    if (contentType.indexOf('/') === -1) {
      contentType = _mime2['default'].lookup(contentType);
    }
    if (encoding !== false && contentType.toLowerCase().indexOf('charset=') === -1) {
      contentType += '; charset=' + (encoding || this.config('encoding'));
    }
    this.header('Content-Type', contentType);
  };

  /**
   * get user agent
   * @return {String} []
   */

  _default.prototype.userAgent = function userAgent() {
    return this.headers['user-agent'] || '';
  };

  /**
   * get page request referrer
   * @param  {String} host [only get referrer host]
   * @return {String}      []
   */

  _default.prototype.referrer = function referrer(host) {
    var referrer = this.headers.referer || this.headers.referrer || '';
    if (!referrer || !host) {
      return referrer;
    }
    var info = _url2['default'].parse(referrer);
    return info.hostname;
  };

  /**
   * check http method is get
   * @return {Boolean} []
   */

  _default.prototype.isGet = function isGet() {
    return this.method === 'GET';
  };

  /**
   * check http method is post
   * @return {Boolean} []
   */

  _default.prototype.isPost = function isPost() {
    return this.method === 'POST';
  };

  /**
   * is ajax request
   * @param  {String}  method []
   * @return {Boolean}        []
   */

  _default.prototype.isAjax = function isAjax(method) {
    if (method && this.method !== method.toUpperCase()) {
      return false;
    }
    return this.headers['x-requested-with'] === 'XMLHttpRequest';
  };

  /**
   * is jsonp request
   * @param  {String}  name [callback name]
   * @return {Boolean}      []
   */

  _default.prototype.isJsonp = function isJsonp(name) {
    name = name || this.config('callback_name');
    return !!this.get(name);
  };

  /**
   * get or set get params
   * @param  {String} name []
   * @return {Object | String}      []
   */

  _default.prototype.get = function get(name, value) {
    if (value === undefined) {
      if (name === undefined) {
        return this._get;
      } else if (think.isString(name)) {
        return this._get[name] || '';
      }
      this._get = name;
    } else {
      this._get[name] = value;
    }
  };

  /**
   * get or set post params
   * @param  {String} name []
   * @return {Object | String}      []
   */

  _default.prototype.post = function post(name, value) {
    if (value === undefined) {
      if (name === undefined) {
        return this._post;
      } else if (think.isString(name)) {
        return this._post[name] || '';
      }
      this._post = name;
    } else {
      this._post[name] = value;
    }
  };

  /**
   * get post or get params
   * @param  {String} name []
   * @return {Object | String}      []
   */

  _default.prototype.param = function param(name) {
    if (name === undefined) {
      return think.extend({}, this._get, this._post);
    }
    return this._post[name] || this._get[name] || '';
  };

  /**
   * get or set file data
   * @param  {String} name []
   * @return {Object}      []
   */

  _default.prototype.file = function file(name, value) {
    if (value === undefined) {
      if (name === undefined) {
        return this._file;
      }
      return this._file[name] || {};
    }
    this._file[name] = value;
  };

  /**
   * get or set header
   * @param  {String} name  [header name]
   * @param  {String} value [header value]
   * @return {}       []
   */

  _default.prototype.header = function header(name, value) {
    if (name === undefined) {
      return this.headers;
    } else if (value === undefined) {
      return this.headers[name] || '';
    }
    //check content type is send
    if (name.toLowerCase() === 'content-type') {
      if (this._contentTypeIsSend) {
        return;
      }
      this._contentTypeIsSend = true;
    }
    //set header
    if (!this.res.headersSent) {
      this.res.setHeader(name, value);
    }
  };

  /**
   * set http status
   * @param  {Number} status []
   * @return {}        []
   */

  _default.prototype.status = function status() {
    var _status = arguments.length <= 0 || arguments[0] === undefined ? 200 : arguments[0];

    var res = this.res;
    if (!res.headersSent) {
      res.statusCode = _status;
    }
    return this;
  };

  /**
   * get uesr ip
   * @return {String} [ip4 or ip6]
   */

  _default.prototype.ip = function ip(forward) {
    var proxy = think.config('proxy_on') || this.host === this.hostname;
    var ip = undefined;
    if (proxy) {
      if (forward) {
        return (this.headers['x-forwarded-for'] || '').split(',').filter(function (item) {
          item = item.trim();
          if (think.isIP(item)) {
            return item;
          }
        });
      }
      ip = this.headers['x-real-ip'];
    } else {
      var connection = this.req.connection;
      var socket = this.req.socket;
      if (connection && connection.remoteAddress !== '127.0.0.1') {
        ip = connection.remoteAddress;
      } else if (socket && socket.remoteAddress !== '127.0.0.1') {
        ip = socket.remoteAddress;
      }
    }
    if (!ip) {
      return '127.0.0.1';
    }
    if (ip.indexOf(':') > -1) {
      ip = ip.split(':').slice(-1)[0];
    }
    if (!think.isIP(ip)) {
      return '127.0.0.1';
    }
    return ip;
  };

  /**
   * get or set language
   * @return {String}           []
   */

  _default.prototype.lang = function lang(_lang, asViewPath) {
    if (_lang) {
      this._lang = _lang;
      this._langAsViewPath = asViewPath;
      return;
    }
    //get from property
    if (this._lang) {
      return this._lang;
    }
    //get from cookie
    var key = this.config('locale').cookie_name;
    var value = this.cookie(key);
    if (value) {
      this._lang = value;
      return value;
    }
    //get from header
    _lang = this.header('accept-language');
    this._lang = _lang.split(',')[0];
    return this._lang;
  };

  /**
   * get or set theme
   * @param  {String} theme []
   * @return {String}       []
   */

  _default.prototype.theme = function theme(_theme) {
    if (_theme) {
      this._theme = _theme;
      return;
    }
    return this._theme;
  };

  /**
   * get or set cookie
   * @param  {} name    []
   * @param  {} value   []
   * @param  {} options []
   * @return {}         []
   */

  _default.prototype.cookie = function cookie(name, value, options) {
    //send cookies
    if (name === true) {
      if (think.isEmpty(this._sendCookie)) {
        return;
      }
      var cookies = _Object$values(this._sendCookie).map(function (item) {
        return _cookie.stringify(item.name, item.value, item);
      });
      this.header('Set-Cookie', cookies);
      this._sendCookie = {};
      return;
    } else if (name === undefined) {
      return this._cookie;
    } else if (value === undefined) {
      return this._cookie[name] || '';
    }
    //set cookie
    if (typeof options === 'number') {
      options = { timeout: options };
    }
    options = think.extend({}, this.config('cookie'), options);
    if (value === null) {
      options.timeout = -1000;
    }
    if (options.timeout !== 0) {
      options.expires = new Date(Date.now() + options.timeout * 1000);
    }
    if (options.timeout > 0) {
      options.maxage = options.timeout;
    }
    options.name = name;
    options.value = value;
    this._sendCookie[name] = options;
  };

  /**
   * redirect
   * @param  {String} url  [redirect url]
   * @param  {Number} code []
   * @return {}      []
   */

  _default.prototype.redirect = function redirect(url, code) {
    this.res.statusCode = code || 302;
    this.header('Location', url || '/');
    this.end();
  };

  /**
   * send time
   * @param  {String} name [time type]
   * @return {}      []
   */

  _default.prototype.sendTime = function sendTime(name) {
    var time = Date.now() - this.startTime;
    this.header('X-' + (name || 'EXEC-TIME'), time + 'ms');
  };

  /**
   * output with success errno & errmsg
   * @param  {Object} data    [output data]
   * @param  {String} message [errmsg]
   * @return {Promise}         [pedding promise]
   */

  _default.prototype.success = function success() {
    var data = arguments.length <= 0 || arguments[0] === undefined ? '' : arguments[0];

    var _obj;

    var message = arguments.length <= 1 || arguments[1] === undefined ? '' : arguments[1];

    var error = this.config('error');
    var obj = (_obj = {}, _obj[error.key] = 0, _obj[error.msg] = message, _obj.data = data, _obj);
    this.type(this.config('json_content_type'));
    this.end(obj);
  };

  /**
   * output with fail errno & errmsg
   * @param  {Number} errno  [error number]
   * @param  {String} errmsg [error message]
   * @param  {Object} data   [output data]
   * @return {Promise}        [pedding promise]
   */

  _default.prototype.fail = function fail(errno) {
    var errmsg = arguments.length <= 1 || arguments[1] === undefined ? '' : arguments[1];
    var data = arguments.length <= 2 || arguments[2] === undefined ? '' : arguments[2];

    var obj = undefined;
    var error = this.config('error');
    if (think.isObject(errno)) {
      obj = think.extend({}, errno);
    } else {
      var _obj2;

      if (/^[A-Z\_]+$/.test(errno)) {
        var msg = this.locale(errno);
        if (think.isArray(msg)) {
          errno = msg[0];
          errmsg = msg[1];
        }
      }
      if (!think.isNumber(errno)) {
        data = errmsg;
        errmsg = errno;
        errno = error.default_errno;
      }
      // if(!think.isString(errmsg)){
      //   data = errmsg;
      //   errmsg = '';
      // }
      //read errmsg from config/locale/[lang].js
      if (errmsg === undefined) {
        errmsg = this.locale(errno) || '';
      }
      obj = (_obj2 = {}, _obj2[error.key] = errno, _obj2[error.msg] = errmsg, _obj2);
      if (data) {
        obj.data = data;
      }
    }
    this.type(this.config('json_content_type'));
    this.end(obj);
  };

  /**
   * output with jsonp
   * @param  {Object} data [output data]
   * @return {}      []
   */

  _default.prototype.jsonp = function jsonp(data) {
    this.type(this.config('json_content_type'));
    var callback = this.get(this.config('callback_name'));
    //remove unsafe chars
    callback = callback.replace(/[^\w\.]/g, '');
    if (callback) {
      data = callback + '(' + (data !== undefined ? JSON.stringify(data) : '') + ')';
    }
    this.end(data);
  };

  /**
   * output with json
   * @param  {Object} data [output data]
   * @return {Promise}      []
   */

  _default.prototype.json = function json(data) {
    this.type(this.config('json_content_type'));
    this.end(data);
  };

  /**
   * get view instance
   * @return {Object} []
   */

  _default.prototype.view = function view() {
    if (!this._view) {
      var cls = think.require('view');
      this._view = new cls(this);
    }
    return this._view;
  };

  /**
   * set cache-control and expires header
   * @return {} []
   */

  _default.prototype.expires = function expires(time) {
    time = time * 1000;
    var date = new Date(Date.now() + time);
    this.header('Cache-Control', 'max-age=' + time);
    this.header('Expires', date.toUTCString());
  };

  /**
   * get locale value
   * @param  {String} key []
   * @return {String}     []
   */

  _default.prototype.locale = function locale(key) {
    var lang = this.lang();
    var locales = this.config(think.dirname.locale);
    var values = locales[lang] || {};
    var defaultLocales = locales[this.config('locale.default')];
    if (!key) {
      return think.isEmpty(values) ? defaultLocales : values;
    }
    var value = values[key] || defaultLocales[key] || key;
    if (!think.isString(value)) {
      return value;
    }

    for (var _len = arguments.length, data = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      data[_key - 1] = arguments[_key];
    }

    return _util2['default'].format.apply(_util2['default'], [value].concat(data));
  };

  /**
  * get or set session
  * @param  {String} name  [session name]
  * @param  {mixed} value [session value]
  * @return {Promise}       []
  */

  _default.prototype.session = function session(name, value) {
    think.session(this);
    var instance = this._session;
    if (name === undefined) {
      return instance['delete']();
    }
    if (value !== undefined) {
      return instance.set(name, value);
    }
    return instance.get(name);
  };

  /**
   * write content
   * @param  {mixed} obj      []
   * @param  {String} encoding []
   * @return {Promise}          []
   */

  _default.prototype.write = function write(obj) {
    var encoding = arguments.length <= 1 || arguments[1] === undefined ? this.config('encoding') : arguments[1];

    if (!this.res.connection) {
      return;
    }
    this.type(this.config('view.content_type'));
    this.cookie(true);
    if (obj === undefined) {
      return;
    }
    if (think.isPromise(obj)) {
      //ignore Content-Type header before set
      this._contentTypeIsSend = false;
      throw new Error('cat not write promise');
    }
    if (think.isArray(obj) || think.isObject(obj)) {
      obj = JSON.stringify(obj);
    } else if (!think.isBuffer(obj)) {
      obj += '';
    }
    var outputConfig = this.config('output_content');
    if (!outputConfig) {
      return this.res.write(obj, encoding);
    }
    if (!this._outputContentPromise) {
      this._outputContentPromise = [];
    }
    var fn = think.co.wrap(outputConfig);
    var promise = fn(obj, encoding, this);
    this._outputContentPromise.push(promise);
  };

  /**
   * end
   * @return {} []
   */

  _default.prototype._end = function _end() {
    var _this3 = this;

    this.cookie(true);
    this.res.end();
    this.emit('afterEnd', this);

    //show request info
    if (this.config('log_request') && !this._isResource) {
      think.log(function (colors) {
        var msg = [_this3.method, _this3.url, colors.cyan('' + _this3.res.statusCode)].join(' ');
        return msg;
      }, 'HTTP', this.startTime);
    }

    //remove upload tmp files
    if (!think.isEmpty(this._file)) {
      var key, filepath;
      for (key in this._file) {
        filepath = this._file[key].path;
        if (think.isFile(filepath)) {
          _fs2['default'].unlink(filepath, function () {});
        }
      }
    }
  };

  /**
   * http end
   * @return {} []
   */

  _default.prototype.end = function end(obj, encoding) {
    var _this4 = this;

    this.write(obj, encoding);
    //set http end flag
    this._isEnd = true;
    if (!this._outputContentPromise) {
      return this._end();
    }

    return _Promise.all(this._outputContentPromise).then(function () {
      _this4._outputContentPromise = undefined;
      _this4._end();
    })['catch'](function () {
      _this4._end();
    });
  };

  return _default;
})(think.base);

exports['default'] = _default;
module.exports = exports['default'];

//array indexOf is faster than string