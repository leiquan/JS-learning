'use strict';

var _inherits = require('babel-runtime/helpers/inherits')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _Object$keys = require('babel-runtime/core-js/object/keys')['default'];

var _Promise = require('babel-runtime/core-js/promise')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

exports.__esModule = true;

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

/**
 * view class
 * @return {} []
 */

var _default = (function (_think$http$base) {
  _inherits(_default, _think$http$base);

  function _default() {
    _classCallCheck(this, _default);

    _think$http$base.apply(this, arguments);
  }

  /**
   * init method
   * @param  {Object} http []
   * @return {}      []
   */

  _default.prototype.init = function init(http) {
    _think$http$base.prototype.init.call(this, http);
    this.tVar = {};
  };

  /**
   * assign
   * @param  {String} name  []
   * @param  {mixed} value []
   * @return {}       []
   */

  _default.prototype.assign = function assign(name, value) {
    if (name === undefined) {
      return this.tVar;
    } else if (value === undefined) {
      if (think.isString(name)) {
        return this.tVar[name];
      } else {
        for (var key in name) {
          this.tVar[key] = name[key];
        }
      }
    } else {
      this.tVar[name] = value;
    }
  };

  /**
   * output template file
   * @param  {String} templateFile [template filepath]
   * @param  {String} charset      [content encoding]
   * @param  {String} contentType  [content type]
   * @return {Promise}              []
   */

  _default.prototype.display = function display(templateFile, charset, contentType, config) {
    var content;
    return _regeneratorRuntime.async(function display$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          if (think.isObject(charset)) {
            config = charset;
            charset = '';
          } else if (think.isObject(contentType)) {
            config = contentType;
            contentType = '';
          }
          context$2$0.prev = 1;
          context$2$0.next = 4;
          return _regeneratorRuntime.awrap(this.hook('view_before'));

        case 4:
          context$2$0.next = 6;
          return _regeneratorRuntime.awrap(this.fetch(templateFile, config));

        case 6:
          content = context$2$0.sent;
          context$2$0.next = 9;
          return _regeneratorRuntime.awrap(this.render(content, charset, contentType));

        case 9:
          context$2$0.next = 11;
          return _regeneratorRuntime.awrap(this.hook('view_after', content));

        case 11:
          context$2$0.next = 18;
          break;

        case 13:
          context$2$0.prev = 13;
          context$2$0.t0 = context$2$0['catch'](1);

          this.http.error = context$2$0.t0;
          context$2$0.next = 18;
          return _regeneratorRuntime.awrap(think.statusAction(500, this.http, true));

        case 18:
          return context$2$0.abrupt('return', think.prevent());

        case 19:
        case 'end':
          return context$2$0.stop();
      }
    }, null, this, [[1, 13]]);
  };

  /**
   * render template content
   * @param  {String} content     [template content]
   * @param  {String} charset     [charset]
   * @param  {String} contentType [contentType]
   * @return {}             []
   */

  _default.prototype.render = function render() {
    var content = arguments.length <= 0 || arguments[0] === undefined ? '' : arguments[0];
    var charset = arguments.length <= 1 || arguments[1] === undefined ? this.http.config('encoding') : arguments[1];
    var contentType = arguments.length <= 2 || arguments[2] === undefined ? this.http.config('view.content_type') : arguments[2];

    this.http.type(contentType, charset);
    return this.http.end(content, charset);
  };

  /**
   * check template filepath exist
   * @param  {String} templateFile [template filepath]
   * @param  {Boolean} inView       []
   * @return {Promise}              []
   */

  _default.prototype.checkTemplateExist = function checkTemplateExist(templateFile) {
    var cacheData = thinkCache(thinkCache.TEMPLATE);
    if (templateFile in cacheData) {
      return true;
    }
    if (think.isFile(templateFile)) {
      //add template file to cache
      cacheData[templateFile] = true;
      return true;
    }
    return false;
  };

  /**
   * fetch template file content
   * @param  {String} templateFile [template file]
   * @return {Promise}             []
   */

  _default.prototype.fetch = function fetch(templateFile, config) {
    var tVar, err, promises, content;
    return _regeneratorRuntime.async(function fetch$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          tVar = this.tVar;

          config = think.extend({
            templateFile: templateFile
          }, this.config('view'), config);

          if (!(!templateFile || !_path2['default'].isAbsolute(templateFile))) {
            context$2$0.next = 6;
            break;
          }

          context$2$0.next = 5;
          return _regeneratorRuntime.awrap(this.hook('view_template', config));

        case 5:
          templateFile = context$2$0.sent;

        case 6:
          if (this.checkTemplateExist(templateFile)) {
            context$2$0.next = 9;
            break;
          }

          err = new Error(think.locale('TEMPLATE_NOT_EXIST', templateFile));
          return context$2$0.abrupt('return', think.reject(err));

        case 9:
          promises = _Object$keys(tVar).map(function (key) {
            if (!think.isPromise(tVar[key])) {
              return;
            }
            return tVar[key].then(function (data) {
              tVar[key] = data;
            });
          });
          context$2$0.next = 12;
          return _regeneratorRuntime.awrap(_Promise.all(promises));

        case 12:
          context$2$0.next = 14;
          return _regeneratorRuntime.awrap(this.hook('view_parse', {
            'var': tVar,
            'file': templateFile,
            'config': config
          }));

        case 14:
          content = context$2$0.sent;
          return context$2$0.abrupt('return', this.hook('view_filter', content));

        case 16:
        case 'end':
          return context$2$0.stop();
      }
    }, null, this);
  };

  return _default;
})(think.http.base);

exports['default'] = _default;
module.exports = exports['default'];