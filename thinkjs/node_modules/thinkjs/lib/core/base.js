'use strict';

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

exports.__esModule = true;

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

/**
 * Base Class
 * @param  {Object} http
 * @return {Class}
 */

var _default = (function () {
  /**
   * constructor
   * @param  {Object} http []
   * @return {}      []
   */

  function _default() {
    _classCallCheck(this, _default);

    this.init.apply(this, arguments);
  }

  /**
   * init
   * @param  {Object} http []
   * @return {}      []
   */

  _default.prototype.init = function init() {};

  /**
   * before magic method
   * @return {} []
   */

  _default.prototype.__before = function __before() {};

  /**
   * after magic method
   * @return {} []
   */

  _default.prototype.__after = function __after() {};

  /**
   * invoke method, support __before & __after magic methods
   * @param  {String} method []
   * @param  {mixed} data []
   * @return {Promise}    []
   */

  _default.prototype.invoke = function invoke(method) {
    for (var _len = arguments.length, data = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      data[_key - 1] = arguments[_key];
    }

    var result;
    return _regeneratorRuntime.async(function invoke$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          if (!think.isFunction(this.__before)) {
            context$2$0.next = 3;
            break;
          }

          context$2$0.next = 3;
          return _regeneratorRuntime.awrap(think.co(this.__before(this)));

        case 3:
          context$2$0.next = 5;
          return _regeneratorRuntime.awrap(think.co(this[method].apply(this, data)));

        case 5:
          result = context$2$0.sent;

          if (!think.isFunction(this.__after)) {
            context$2$0.next = 9;
            break;
          }

          context$2$0.next = 9;
          return _regeneratorRuntime.awrap(think.co(this.__after(this)));

        case 9:
          return context$2$0.abrupt('return', result);

        case 10:
        case 'end':
          return context$2$0.stop();
      }
    }, null, this);
  };

  /**
   * get current class filename
   * @return {} []
   */

  _default.prototype.parseFilename = function parseFilename(filename) {
    filename = filename || this.__filename;
    var filenames = filename.split(_path2['default'].sep).reverse();
    var basename = filenames[0].slice(0, -3);
    var module = undefined;
    switch (think.mode) {
      case think.mode_module:
        module = filenames[2];
        break;
      case think.mode_normal:
        module = filenames[1];
        break;
      default:
        module = think.config('default_module');
    }
    return {
      module: module,
      basename: basename
    };
  };

  return _default;
})();

exports['default'] = _default;
module.exports = exports['default'];

//await think.co.wrap(this.__before).bind(this)(this);

//let result = await think.co.wrap(this[method]).apply(this, data);

//await think.co.wrap(this.__after).bind(this)(this);